// Generated from ./Model.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('antlr4/index');
var ModelListener = require('./ModelListener').ModelListener;
var grammarFileName = "Model.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003p\u0289\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003",
    "\u0007\u0003a\n\u0003\f\u0003\u000e\u0003d\u000b\u0003\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0005\u0004j\n\u0004\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005v\n\u0005\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0005\u0006|\n\u0006\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0005\b\u0089\n\b\u0003\t\u0007\t\u008c\n\t\f\t\u000e",
    "\t\u008f\u000b\t\u0003\t\u0003\t\u0007\t\u0093\n\t\f\t\u000e\t\u0096",
    "\u000b\t\u0003\t\u0005\t\u0099\n\t\u0003\n\u0003\n\u0005\n\u009d\n\n",
    "\u0003\n\u0003\n\u0005\n\u00a1\n\n\u0003\n\u0005\n\u00a4\n\n\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0005\n\u00aa\n\n\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0007\u000b\u00b0\n\u000b\f\u000b\u000e\u000b\u00b3",
    "\u000b\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0005\f",
    "\u00ba\n\f\u0003\r\u0003\r\u0003\r\u0007\r\u00bf\n\r\f\r\u000e\r\u00c2",
    "\u000b\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e",
    "\u00c8\n\u000e\f\u000e\u000e\u000e\u00cb\u000b\u000e\u0003\u000f\u0007",
    "\u000f\u00ce\n\u000f\f\u000f\u000e\u000f\u00d1\u000b\u000f\u0003\u0010",
    "\u0007\u0010\u00d4\n\u0010\f\u0010\u000e\u0010\u00d7\u000b\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0005\u0011\u00e1\n\u0011\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0005\u0012\u00e6\n\u0012\u0003\u0012\u0003\u0012\u0005",
    "\u0012\u00ea\n\u0012\u0003\u0013\u0007\u0013\u00ed\n\u0013\f\u0013\u000e",
    "\u0013\u00f0\u000b\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0005\u0013\u00f6\n\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u00fa",
    "\n\u0013\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u0101\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0005\u0015\u0107\n\u0015\u0003\u0015\u0003\u0015\u0005\u0015",
    "\u010b\n\u0015\u0003\u0015\u0007\u0015\u010e\n\u0015\f\u0015\u000e\u0015",
    "\u0111\u000b\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005",
    "\u0015\u0117\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0007\u0016",
    "\u011c\n\u0016\f\u0016\u000e\u0016\u011f\u000b\u0016\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0005\u0018\u0129\n\u0018\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0005\u0019\u012e\n\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0136\n\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001b\u0003\u001b\u0005\u001b\u013c\n\u001b\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u0142\n\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0006\u001c\u0147\n\u001c\r\u001c",
    "\u000e\u001c\u0148\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0005\u001c\u0157\n\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0006\u001c\u015f\n",
    "\u001c\r\u001c\u000e\u001c\u0160\u0007\u001c\u0163\n\u001c\f\u001c\u000e",
    "\u001c\u0166\u000b\u001c\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0005\u001e\u016d\n\u001e\u0003\u001f\u0003\u001f\u0003",
    " \u0003 \u0003 \u0003 \u0007 \u0175\n \f \u000e \u0178\u000b \u0003",
    " \u0003 \u0003!\u0003!\u0003!\u0003!\u0003!\u0005!\u0181\n!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0006",
    "!\u018e\n!\r!\u000e!\u018f\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0005!\u019e\n!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0005!\u01af\n!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0005!\u01c0\n!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0005!\u01f0",
    "\n!\u0003!\u0005!\u01f3\n!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0005!\u0210\n!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0007!\u021e\n!\f!\u000e!\u0221",
    "\u000b!\u0003\"\u0003\"\u0005\"\u0225\n\"\u0003#\u0003#\u0003#\u0003",
    "#\u0005#\u022b\n#\u0003#\u0007#\u022e\n#\f#\u000e#\u0231\u000b#\u0003",
    "$\u0003$\u0003$\u0007$\u0236\n$\f$\u000e$\u0239\u000b$\u0003%\u0003",
    "%\u0003%\u0003%\u0003&\u0003&\u0005&\u0241\n&\u0003\'\u0003\'\u0003",
    "\'\u0007\'\u0246\n\'\f\'\u000e\'\u0249\u000b\'\u0003(\u0003(\u0003(",
    "\u0003(\u0003)\u0003)\u0003)\u0007)\u0252\n)\f)\u000e)\u0255\u000b)",
    "\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0006*\u025f",
    "\n*\r*\u000e*\u0260\u0003*\u0003*\u0005*\u0265\n*\u0003*\u0003*\u0003",
    "*\u0007*\u026a\n*\f*\u000e*\u026d\u000b*\u0003+\u0003+\u0003+\u0007",
    "+\u0272\n+\f+\u000e+\u0275\u000b+\u0003,\u0003,\u0003,\u0007,\u027a",
    "\n,\f,\u000e,\u027d\u000b,\u0003-\u0003-\u0003-\u0007-\u0282\n-\f-\u000e",
    "-\u0285\u000b-\u0003.\u0003.\u0003.\u0002\u00056@R/\u0002\u0004\u0006",
    "\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*",
    ",.02468:<>@BDFHJLNPRTVXZ\u0002\f\u0004\u0002\u000e\u000fkk\u0003\u0002",
    "\u0016\u0017\u0003\u0002\u0018\u001e\u0003\u0002&-\u0003\u0002/2\u0004",
    "\u0002\b\b@F\u0004\u0002\u0013\u0013GH\u0004\u0002\u0016\u0016IQ\u0003",
    "\u0002TU\u0003\u0002bj\u0002\u02ca\u0002\\\u0003\u0002\u0002\u0002\u0004",
    "b\u0003\u0002\u0002\u0002\u0006i\u0003\u0002\u0002\u0002\bu\u0003\u0002",
    "\u0002\u0002\nw\u0003\u0002\u0002\u0002\f}\u0003\u0002\u0002\u0002\u000e",
    "\u0082\u0003\u0002\u0002\u0002\u0010\u0098\u0003\u0002\u0002\u0002\u0012",
    "\u009a\u0003\u0002\u0002\u0002\u0014\u00ab\u0003\u0002\u0002\u0002\u0016",
    "\u00b6\u0003\u0002\u0002\u0002\u0018\u00bb\u0003\u0002\u0002\u0002\u001a",
    "\u00c3\u0003\u0002\u0002\u0002\u001c\u00cf\u0003\u0002\u0002\u0002\u001e",
    "\u00d5\u0003\u0002\u0002\u0002 \u00e0\u0003\u0002\u0002\u0002\"\u00e2",
    "\u0003\u0002\u0002\u0002$\u00ee\u0003\u0002\u0002\u0002&\u00fb\u0003",
    "\u0002\u0002\u0002(\u00fd\u0003\u0002\u0002\u0002*\u0118\u0003\u0002",
    "\u0002\u0002,\u0120\u0003\u0002\u0002\u0002.\u0128\u0003\u0002\u0002",
    "\u00020\u012a\u0003\u0002\u0002\u00022\u0131\u0003\u0002\u0002\u0002",
    "4\u013b\u0003\u0002\u0002\u00026\u0156\u0003\u0002\u0002\u00028\u0167",
    "\u0003\u0002\u0002\u0002:\u016c\u0003\u0002\u0002\u0002<\u016e\u0003",
    "\u0002\u0002\u0002>\u0170\u0003\u0002\u0002\u0002@\u01f2\u0003\u0002",
    "\u0002\u0002B\u0224\u0003\u0002\u0002\u0002D\u0226\u0003\u0002\u0002",
    "\u0002F\u0232\u0003\u0002\u0002\u0002H\u023a\u0003\u0002\u0002\u0002",
    "J\u0240\u0003\u0002\u0002\u0002L\u0242\u0003\u0002\u0002\u0002N\u024a",
    "\u0003\u0002\u0002\u0002P\u024e\u0003\u0002\u0002\u0002R\u0264\u0003",
    "\u0002\u0002\u0002T\u026e\u0003\u0002\u0002\u0002V\u0276\u0003\u0002",
    "\u0002\u0002X\u027e\u0003\u0002\u0002\u0002Z\u0286\u0003\u0002\u0002",
    "\u0002\\]\u0005\u0004\u0003\u0002]^\u0007\u0002\u0002\u0003^\u0003\u0003",
    "\u0002\u0002\u0002_a\u0005\u0006\u0004\u0002`_\u0003\u0002\u0002\u0002",
    "ad\u0003\u0002\u0002\u0002b`\u0003\u0002\u0002\u0002bc\u0003\u0002\u0002",
    "\u0002c\u0005\u0003\u0002\u0002\u0002db\u0003\u0002\u0002\u0002ej\u0005",
    "\b\u0005\u0002fj\u0005\n\u0006\u0002gj\u0005\f\u0007\u0002hj\u0005\u0010",
    "\t\u0002ie\u0003\u0002\u0002\u0002if\u0003\u0002\u0002\u0002ig\u0003",
    "\u0002\u0002\u0002ih\u0003\u0002\u0002\u0002j\u0007\u0003\u0002\u0002",
    "\u0002kl\u0007\u0003\u0002\u0002lm\u0005X-\u0002mn\u0007\u0004\u0002",
    "\u0002no\u0005\u0004\u0003\u0002op\u0007\u0005\u0002\u0002pv\u0003\u0002",
    "\u0002\u0002qr\u0007\u0003\u0002\u0002rs\u0005X-\u0002st\u0005\u0004",
    "\u0003\u0002tv\u0003\u0002\u0002\u0002uk\u0003\u0002\u0002\u0002uq\u0003",
    "\u0002\u0002\u0002v\t\u0003\u0002\u0002\u0002wx\u0007\u0006\u0002\u0002",
    "x{\u0005X-\u0002yz\u0007\u0007\u0002\u0002z|\u0007\b\u0002\u0002{y\u0003",
    "\u0002\u0002\u0002{|\u0003\u0002\u0002\u0002|\u000b\u0003\u0002\u0002",
    "\u0002}~\u0007\t\u0002\u0002~\u007f\u0007k\u0002\u0002\u007f\u0080\u0007",
    "\n\u0002\u0002\u0080\u0081\u00056\u001c\u0002\u0081\r\u0003\u0002\u0002",
    "\u0002\u0082\u0083\u0007\u000b\u0002\u0002\u0083\u0088\u0007k\u0002",
    "\u0002\u0084\u0085\u0007\f\u0002\u0002\u0085\u0086\u0005@!\u0002\u0086",
    "\u0087\u0007\r\u0002\u0002\u0087\u0089\u0003\u0002\u0002\u0002\u0088",
    "\u0084\u0003\u0002\u0002\u0002\u0088\u0089\u0003\u0002\u0002\u0002\u0089",
    "\u000f\u0003\u0002\u0002\u0002\u008a\u008c\u0005\u000e\b\u0002\u008b",
    "\u008a\u0003\u0002\u0002\u0002\u008c\u008f\u0003\u0002\u0002\u0002\u008d",
    "\u008b\u0003\u0002\u0002\u0002\u008d\u008e\u0003\u0002\u0002\u0002\u008e",
    "\u0090\u0003\u0002\u0002\u0002\u008f\u008d\u0003\u0002\u0002\u0002\u0090",
    "\u0099\u0005\u0012\n\u0002\u0091\u0093\u0005\u000e\b\u0002\u0092\u0091",
    "\u0003\u0002\u0002\u0002\u0093\u0096\u0003\u0002\u0002\u0002\u0094\u0092",
    "\u0003\u0002\u0002\u0002\u0094\u0095\u0003\u0002\u0002\u0002\u0095\u0097",
    "\u0003\u0002\u0002\u0002\u0096\u0094\u0003\u0002\u0002\u0002\u0097\u0099",
    "\u0005 \u0011\u0002\u0098\u008d\u0003\u0002\u0002\u0002\u0098\u0094",
    "\u0003\u0002\u0002\u0002\u0099\u0011\u0003\u0002\u0002\u0002\u009a\u009c",
    "\t\u0002\u0002\u0002\u009b\u009d\u0007`\u0002\u0002\u009c\u009b\u0003",
    "\u0002\u0002\u0002\u009c\u009d\u0003\u0002\u0002\u0002\u009d\u009e\u0003",
    "\u0002\u0002\u0002\u009e\u00a0\u0007k\u0002\u0002\u009f\u00a1\u0005",
    "\u0014\u000b\u0002\u00a0\u009f\u0003\u0002\u0002\u0002\u00a0\u00a1\u0003",
    "\u0002\u0002\u0002\u00a1\u00a3\u0003\u0002\u0002\u0002\u00a2\u00a4\u0005",
    "\u001a\u000e\u0002\u00a3\u00a2\u0003\u0002\u0002\u0002\u00a3\u00a4\u0003",
    "\u0002\u0002\u0002\u00a4\u00a9\u0003\u0002\u0002\u0002\u00a5\u00a6\u0007",
    "\u0004\u0002\u0002\u00a6\u00a7\u0005\u001c\u000f\u0002\u00a7\u00a8\u0007",
    "\u0005\u0002\u0002\u00a8\u00aa\u0003\u0002\u0002\u0002\u00a9\u00a5\u0003",
    "\u0002\u0002\u0002\u00a9\u00aa\u0003\u0002\u0002\u0002\u00aa\u0013\u0003",
    "\u0002\u0002\u0002\u00ab\u00ac\u0007\u0010\u0002\u0002\u00ac\u00b1\u0005",
    "\u0016\f\u0002\u00ad\u00ae\u0007\u0011\u0002\u0002\u00ae\u00b0\u0005",
    "\u0016\f\u0002\u00af\u00ad\u0003\u0002\u0002\u0002\u00b0\u00b3\u0003",
    "\u0002\u0002\u0002\u00b1\u00af\u0003\u0002\u0002\u0002\u00b1\u00b2\u0003",
    "\u0002\u0002\u0002\u00b2\u00b4\u0003\u0002\u0002\u0002\u00b3\u00b1\u0003",
    "\u0002\u0002\u0002\u00b4\u00b5\u0007\u0012\u0002\u0002\u00b5\u0015\u0003",
    "\u0002\u0002\u0002\u00b6\u00b9\u0007k\u0002\u0002\u00b7\u00b8\u0007",
    "\n\u0002\u0002\u00b8\u00ba\u0005\u0018\r\u0002\u00b9\u00b7\u0003\u0002",
    "\u0002\u0002\u00b9\u00ba\u0003\u0002\u0002\u0002\u00ba\u0017\u0003\u0002",
    "\u0002\u0002\u00bb\u00c0\u00056\u001c\u0002\u00bc\u00bd\u0007\u0013",
    "\u0002\u0002\u00bd\u00bf\u00056\u001c\u0002\u00be\u00bc\u0003\u0002",
    "\u0002\u0002\u00bf\u00c2\u0003\u0002\u0002\u0002\u00c0\u00be\u0003\u0002",
    "\u0002\u0002\u00c0\u00c1\u0003\u0002\u0002\u0002\u00c1\u0019\u0003\u0002",
    "\u0002\u0002\u00c2\u00c0\u0003\u0002\u0002\u0002\u00c3\u00c4\u0007\u0014",
    "\u0002\u0002\u00c4\u00c9\u00056\u001c\u0002\u00c5\u00c6\u0007\u0011",
    "\u0002\u0002\u00c6\u00c8\u00056\u001c\u0002\u00c7\u00c5\u0003\u0002",
    "\u0002\u0002\u00c8\u00cb\u0003\u0002\u0002\u0002\u00c9\u00c7\u0003\u0002",
    "\u0002\u0002\u00c9\u00ca\u0003\u0002\u0002\u0002\u00ca\u001b\u0003\u0002",
    "\u0002\u0002\u00cb\u00c9\u0003\u0002\u0002\u0002\u00cc\u00ce\u0005\u001e",
    "\u0010\u0002\u00cd\u00cc\u0003\u0002\u0002\u0002\u00ce\u00d1\u0003\u0002",
    "\u0002\u0002\u00cf\u00cd\u0003\u0002\u0002\u0002\u00cf\u00d0\u0003\u0002",
    "\u0002\u0002\u00d0\u001d\u0003\u0002\u0002\u0002\u00d1\u00cf\u0003\u0002",
    "\u0002\u0002\u00d2\u00d4\u0005\u000e\b\u0002\u00d3\u00d2\u0003\u0002",
    "\u0002\u0002\u00d4\u00d7\u0003\u0002\u0002\u0002\u00d5\u00d3\u0003\u0002",
    "\u0002\u0002\u00d5\u00d6\u0003\u0002\u0002\u0002\u00d6\u00d8\u0003\u0002",
    "\u0002\u0002\u00d7\u00d5\u0003\u0002\u0002\u0002\u00d8\u00d9\u0005 ",
    "\u0011\u0002\u00d9\u001f\u0003\u0002\u0002\u0002\u00da\u00e1\u0005\"",
    "\u0012\u0002\u00db\u00e1\u0005\u0012\n\u0002\u00dc\u00e1\u0005$\u0013",
    "\u0002\u00dd\u00e1\u0005(\u0015\u0002\u00de\u00e1\u00050\u0019\u0002",
    "\u00df\u00e1\u0005@!\u0002\u00e0\u00da\u0003\u0002\u0002\u0002\u00e0",
    "\u00db\u0003\u0002\u0002\u0002\u00e0\u00dc\u0003\u0002\u0002\u0002\u00e0",
    "\u00dd\u0003\u0002\u0002\u0002\u00e0\u00de\u0003\u0002\u0002\u0002\u00e0",
    "\u00df\u0003\u0002\u0002\u0002\u00e1!\u0003\u0002\u0002\u0002\u00e2",
    "\u00e3\u0007\u0015\u0002\u0002\u00e3\u00e9\u0007k\u0002\u0002\u00e4",
    "\u00e6\u0005\u0014\u000b\u0002\u00e5\u00e4\u0003\u0002\u0002\u0002\u00e5",
    "\u00e6\u0003\u0002\u0002\u0002\u00e6\u00e7\u0003\u0002\u0002\u0002\u00e7",
    "\u00e8\u0007\u0016\u0002\u0002\u00e8\u00ea\u00056\u001c\u0002\u00e9",
    "\u00e5\u0003\u0002\u0002\u0002\u00e9\u00ea\u0003\u0002\u0002\u0002\u00ea",
    "#\u0003\u0002\u0002\u0002\u00eb\u00ed\u0005&\u0014\u0002\u00ec\u00eb",
    "\u0003\u0002\u0002\u0002\u00ed\u00f0\u0003\u0002\u0002\u0002\u00ee\u00ec",
    "\u0003\u0002\u0002\u0002\u00ee\u00ef\u0003\u0002\u0002\u0002\u00ef\u00f1",
    "\u0003\u0002\u0002\u0002\u00f0\u00ee\u0003\u0002\u0002\u0002\u00f1\u00f2",
    "\u0007k\u0002\u0002\u00f2\u00f3\u0007\n\u0002\u0002\u00f3\u00f5\u0005",
    "6\u001c\u0002\u00f4\u00f6\u00052\u001a\u0002\u00f5\u00f4\u0003\u0002",
    "\u0002\u0002\u00f5\u00f6\u0003\u0002\u0002\u0002\u00f6\u00f9\u0003\u0002",
    "\u0002\u0002\u00f7\u00f8\t\u0003\u0002\u0002\u00f8\u00fa\u0005@!\u0002",
    "\u00f9\u00f7\u0003\u0002\u0002\u0002\u00f9\u00fa\u0003\u0002\u0002\u0002",
    "\u00fa%\u0003\u0002\u0002\u0002\u00fb\u00fc\t\u0004\u0002\u0002\u00fc",
    "\'\u0003\u0002\u0002\u0002\u00fd\u00fe\u0007\u001f\u0002\u0002\u00fe",
    "\u0100\u0007k\u0002\u0002\u00ff\u0101\u0005\u0014\u000b\u0002\u0100",
    "\u00ff\u0003\u0002\u0002\u0002\u0100\u0101\u0003\u0002\u0002\u0002\u0101",
    "\u0106\u0003\u0002\u0002\u0002\u0102\u0103\u0007\f\u0002\u0002\u0103",
    "\u0104\u0005*\u0016\u0002\u0104\u0105\u0007\r\u0002\u0002\u0105\u0107",
    "\u0003\u0002\u0002\u0002\u0106\u0102\u0003\u0002\u0002\u0002\u0106\u0107",
    "\u0003\u0002\u0002\u0002\u0107\u010a\u0003\u0002\u0002\u0002\u0108\u0109",
    "\u0007\n\u0002\u0002\u0109\u010b\u00056\u001c\u0002\u010a\u0108\u0003",
    "\u0002\u0002\u0002\u010a\u010b\u0003\u0002\u0002\u0002\u010b\u010f\u0003",
    "\u0002\u0002\u0002\u010c\u010e\u0005.\u0018\u0002\u010d\u010c\u0003",
    "\u0002\u0002\u0002\u010e\u0111\u0003\u0002\u0002\u0002\u010f\u010d\u0003",
    "\u0002\u0002\u0002\u010f\u0110\u0003\u0002\u0002\u0002\u0110\u0116\u0003",
    "\u0002\u0002\u0002\u0111\u010f\u0003\u0002\u0002\u0002\u0112\u0113\u0007",
    "\u0004\u0002\u0002\u0113\u0114\u0005\u001c\u000f\u0002\u0114\u0115\u0007",
    "\u0005\u0002\u0002\u0115\u0117\u0003\u0002\u0002\u0002\u0116\u0112\u0003",
    "\u0002\u0002\u0002\u0116\u0117\u0003\u0002\u0002\u0002\u0117)\u0003",
    "\u0002\u0002\u0002\u0118\u011d\u0005,\u0017\u0002\u0119\u011a\u0007",
    "\u0011\u0002\u0002\u011a\u011c\u0005,\u0017\u0002\u011b\u0119\u0003",
    "\u0002\u0002\u0002\u011c\u011f\u0003\u0002\u0002\u0002\u011d\u011b\u0003",
    "\u0002\u0002\u0002\u011d\u011e\u0003\u0002\u0002\u0002\u011e+\u0003",
    "\u0002\u0002\u0002\u011f\u011d\u0003\u0002\u0002\u0002\u0120\u0121\u0007",
    "k\u0002\u0002\u0121\u0122\u0007\n\u0002\u0002\u0122\u0123\u00056\u001c",
    "\u0002\u0123-\u0003\u0002\u0002\u0002\u0124\u0125\u0007 \u0002\u0002",
    "\u0125\u0129\u0005@!\u0002\u0126\u0127\u0007!\u0002\u0002\u0127\u0129",
    "\u0005@!\u0002\u0128\u0124\u0003\u0002\u0002\u0002\u0128\u0126\u0003",
    "\u0002\u0002\u0002\u0129/\u0003\u0002\u0002\u0002\u012a\u012d\u0007",
    "\"\u0002\u0002\u012b\u012c\u0007k\u0002\u0002\u012c\u012e\u0007\n\u0002",
    "\u0002\u012d\u012b\u0003\u0002\u0002\u0002\u012d\u012e\u0003\u0002\u0002",
    "\u0002\u012e\u012f\u0003\u0002\u0002\u0002\u012f\u0130\u0005@!\u0002",
    "\u01301\u0003\u0002\u0002\u0002\u0131\u0132\u0007\u0010\u0002\u0002",
    "\u0132\u0135\u00054\u001b\u0002\u0133\u0134\u0007\u0011\u0002\u0002",
    "\u0134\u0136\u00054\u001b\u0002\u0135\u0133\u0003\u0002\u0002\u0002",
    "\u0135\u0136\u0003\u0002\u0002\u0002\u0136\u0137\u0003\u0002\u0002\u0002",
    "\u0137\u0138\u0007\u0012\u0002\u0002\u01383\u0003\u0002\u0002\u0002",
    "\u0139\u013c\u0005@!\u0002\u013a\u013c\u0007\b\u0002\u0002\u013b\u0139",
    "\u0003\u0002\u0002\u0002\u013b\u013a\u0003\u0002\u0002\u0002\u013c5",
    "\u0003\u0002\u0002\u0002\u013d\u013e\b\u001c\u0001\u0002\u013e\u0157",
    "\u00058\u001d\u0002\u013f\u0141\u0005:\u001e\u0002\u0140\u0142\u0005",
    "> \u0002\u0141\u0140\u0003\u0002\u0002\u0002\u0141\u0142\u0003\u0002",
    "\u0002\u0002\u0142\u0157\u0003\u0002\u0002\u0002\u0143\u0146\u0005:",
    "\u001e\u0002\u0144\u0145\u0007\u0010\u0002\u0002\u0145\u0147\u0007\u0012",
    "\u0002\u0002\u0146\u0144\u0003\u0002\u0002\u0002\u0147\u0148\u0003\u0002",
    "\u0002\u0002\u0148\u0146\u0003\u0002\u0002\u0002\u0148\u0149\u0003\u0002",
    "\u0002\u0002\u0149\u0157\u0003\u0002\u0002\u0002\u014a\u014b\u0007\f",
    "\u0002\u0002\u014b\u014c\u00056\u001c\u0002\u014c\u014d\u0007\r\u0002",
    "\u0002\u014d\u0157\u0003\u0002\u0002\u0002\u014e\u014f\u0007$\u0002",
    "\u0002\u014f\u0150\u0007k\u0002\u0002\u0150\u0151\u0007\n\u0002\u0002",
    "\u0151\u0152\u00056\u001c\u0002\u0152\u0153\u0007a\u0002\u0002\u0153",
    "\u0154\u0005@!\u0002\u0154\u0155\u0007%\u0002\u0002\u0155\u0157\u0003",
    "\u0002\u0002\u0002\u0156\u013d\u0003\u0002\u0002\u0002\u0156\u013f\u0003",
    "\u0002\u0002\u0002\u0156\u0143\u0003\u0002\u0002\u0002\u0156\u014a\u0003",
    "\u0002\u0002\u0002\u0156\u014e\u0003\u0002\u0002\u0002\u0157\u0164\u0003",
    "\u0002\u0002\u0002\u0158\u0159\f\u0005\u0002\u0002\u0159\u015a\u0007",
    "#\u0002\u0002\u015a\u0163\u00056\u001c\u0006\u015b\u015e\f\u0006\u0002",
    "\u0002\u015c\u015d\u0007\b\u0002\u0002\u015d\u015f\u00056\u001c\u0002",
    "\u015e\u015c\u0003\u0002\u0002\u0002\u015f\u0160\u0003\u0002\u0002\u0002",
    "\u0160\u015e\u0003\u0002\u0002\u0002\u0160\u0161\u0003\u0002\u0002\u0002",
    "\u0161\u0163\u0003\u0002\u0002\u0002\u0162\u0158\u0003\u0002\u0002\u0002",
    "\u0162\u015b\u0003\u0002\u0002\u0002\u0163\u0166\u0003\u0002\u0002\u0002",
    "\u0164\u0162\u0003\u0002\u0002\u0002\u0164\u0165\u0003\u0002\u0002\u0002",
    "\u01657\u0003\u0002\u0002\u0002\u0166\u0164\u0003\u0002\u0002\u0002",
    "\u0167\u0168\t\u0005\u0002\u0002\u01689\u0003\u0002\u0002\u0002\u0169",
    "\u016d\u0005X-\u0002\u016a\u016d\u0007.\u0002\u0002\u016b\u016d\u0005",
    "<\u001f\u0002\u016c\u0169\u0003\u0002\u0002\u0002\u016c\u016a\u0003",
    "\u0002\u0002\u0002\u016c\u016b\u0003\u0002\u0002\u0002\u016d;\u0003",
    "\u0002\u0002\u0002\u016e\u016f\t\u0006\u0002\u0002\u016f=\u0003\u0002",
    "\u0002\u0002\u0170\u0171\u0007\u0010\u0002\u0002\u0171\u0176\u00056",
    "\u001c\u0002\u0172\u0173\u0007\u0011\u0002\u0002\u0173\u0175\u00056",
    "\u001c\u0002\u0174\u0172\u0003\u0002\u0002\u0002\u0175\u0178\u0003\u0002",
    "\u0002\u0002\u0176\u0174\u0003\u0002\u0002\u0002\u0176\u0177\u0003\u0002",
    "\u0002\u0002\u0177\u0179\u0003\u0002\u0002\u0002\u0178\u0176\u0003\u0002",
    "\u0002\u0002\u0179\u017a\u0007\u0012\u0002\u0002\u017a?\u0003\u0002",
    "\u0002\u0002\u017b\u017c\b!\u0001\u0002\u017c\u017d\u0005:\u001e\u0002",
    "\u017d\u017e\u0005> \u0002\u017e\u0180\u0007\f\u0002\u0002\u017f\u0181",
    "\u0005B\"\u0002\u0180\u017f\u0003\u0002\u0002\u0002\u0180\u0181\u0003",
    "\u0002\u0002\u0002\u0181\u0182\u0003\u0002\u0002\u0002\u0182\u0183\u0007",
    "\r\u0002\u0002\u0183\u01f3\u0003\u0002\u0002\u0002\u0184\u0185\u0007",
    "\f\u0002\u0002\u0185\u0186\u0005@!\u0002\u0186\u0187\u0007\r\u0002\u0002",
    "\u0187\u01f3\u0003\u0002\u0002\u0002\u0188\u0189\u00073\u0002\u0002",
    "\u0189\u018a\u0007\f\u0002\u0002\u018a\u018d\u0005@!\u0002\u018b\u018c",
    "\u0007\u0011\u0002\u0002\u018c\u018e\u0005@!\u0002\u018d\u018b\u0003",
    "\u0002\u0002\u0002\u018e\u018f\u0003\u0002\u0002\u0002\u018f\u018d\u0003",
    "\u0002\u0002\u0002\u018f\u0190\u0003\u0002\u0002\u0002\u0190\u0191\u0003",
    "\u0002\u0002\u0002\u0191\u0192\u0007\r\u0002\u0002\u0192\u01f3\u0003",
    "\u0002\u0002\u0002\u0193\u01f3\u0005Z.\u0002\u0194\u01f3\u0007k\u0002",
    "\u0002\u0195\u01f3\u00058\u001d\u0002\u0196\u0197\u00056\u001c\u0002",
    "\u0197\u0198\u0007\u0007\u0002\u0002\u0198\u0199\u0007\u000e\u0002\u0002",
    "\u0199\u01f3\u0003\u0002\u0002\u0002\u019a\u019b\u00056\u001c\u0002",
    "\u019b\u019d\u0007\f\u0002\u0002\u019c\u019e\u0005B\"\u0002\u019d\u019c",
    "\u0003\u0002\u0002\u0002\u019d\u019e\u0003\u0002\u0002\u0002\u019e\u019f",
    "\u0003\u0002\u0002\u0002\u019f\u01a0\u0007\r\u0002\u0002\u01a0\u01f3",
    "\u0003\u0002\u0002\u0002\u01a1\u01a2\u00074\u0002\u0002\u01a2\u01f3",
    "\u0005@!\u001d\u01a3\u01a4\u0007\u0004\u0002\u0002\u01a4\u01a5\u0005",
    "\u001c\u000f\u0002\u01a5\u01a6\u0007\u0005\u0002\u0002\u01a6\u01a7\u0006",
    "!\u0004\u0003\u01a7\u01f3\u0003\u0002\u0002\u0002\u01a8\u01a9\u0007",
    "5\u0002\u0002\u01a9\u01aa\u0005@!\u0002\u01aa\u01ab\u00076\u0002\u0002",
    "\u01ab\u01ae\u0005@!\u0002\u01ac\u01ad\u00077\u0002\u0002\u01ad\u01af",
    "\u0005@!\u0002\u01ae\u01ac\u0003\u0002\u0002\u0002\u01ae\u01af\u0003",
    "\u0002\u0002\u0002\u01af\u01f3\u0003\u0002\u0002\u0002\u01b0\u01b1\u0007",
    "8\u0002\u0002\u01b1\u01b2\u0005@!\u0002\u01b2\u01b3\u00079\u0002\u0002",
    "\u01b3\u01b4\u0005@!\u001a\u01b4\u01f3\u0003\u0002\u0002\u0002\u01b5",
    "\u01b6\u0007:\u0002\u0002\u01b6\u01b7\u0005R*\u0002\u01b7\u01b8\u0007",
    ";\u0002\u0002\u01b8\u01b9\u0005@!\u0002\u01b9\u01ba\u00079\u0002\u0002",
    "\u01ba\u01bb\u0005@!\u0019\u01bb\u01f3\u0003\u0002\u0002\u0002\u01bc",
    "\u01bd\u0005<\u001f\u0002\u01bd\u01bf\u0007\u0004\u0002\u0002\u01be",
    "\u01c0\u0005V,\u0002\u01bf\u01be\u0003\u0002\u0002\u0002\u01bf\u01c0",
    "\u0003\u0002\u0002\u0002\u01c0\u01c1\u0003\u0002\u0002\u0002\u01c1\u01c2",
    "\u0007\u0005\u0002\u0002\u01c2\u01f3\u0003\u0002\u0002\u0002\u01c3\u01c4",
    "\u0005<\u001f\u0002\u01c4\u01c5\u0007\u0004\u0002\u0002\u01c5\u01c6",
    "\u0005@!\u0002\u01c6\u01c7\u0007<\u0002\u0002\u01c7\u01c8\u0005@!\u0002",
    "\u01c8\u01c9\u0007\u0005\u0002\u0002\u01c9\u01f3\u0003\u0002\u0002\u0002",
    "\u01ca\u01cb\u0005<\u001f\u0002\u01cb\u01cc\u0007\u0004\u0002\u0002",
    "\u01cc\u01cd\u0005@!\u0002\u01cd\u01ce\u0007=\u0002\u0002\u01ce\u01cf",
    "\u0005L\'\u0002\u01cf\u01d0\u0007a\u0002\u0002\u01d0\u01d1\u0005@!\u0002",
    "\u01d1\u01d2\u0007\u0005\u0002\u0002\u01d2\u01f3\u0003\u0002\u0002\u0002",
    "\u01d3\u01d4\u0007V\u0002\u0002\u01d4\u01d5\u0007\f\u0002\u0002\u01d5",
    "\u01d6\u0005@!\u0002\u01d6\u01d7\u0007\r\u0002\u0002\u01d7\u01f3\u0003",
    "\u0002\u0002\u0002\u01d8\u01d9\u0007G\u0002\u0002\u01d9\u01f3\u0005",
    "@!\u000b\u01da\u01db\u0005X-\u0002\u01db\u01dc\u0007W\u0002\u0002\u01dc",
    "\u01f3\u0003\u0002\u0002\u0002\u01dd\u01de\u0007X\u0002\u0002\u01de",
    "\u01df\u0005L\'\u0002\u01df\u01e0\u0007a\u0002\u0002\u01e0\u01e1\u0005",
    "@!\t\u01e1\u01f3\u0003\u0002\u0002\u0002\u01e2\u01e3\u0007Y\u0002\u0002",
    "\u01e3\u01e4\u0005L\'\u0002\u01e4\u01e5\u0007a\u0002\u0002\u01e5\u01e6",
    "\u0005@!\b\u01e6\u01f3\u0003\u0002\u0002\u0002\u01e7\u01e8\u0005R*\u0002",
    "\u01e8\u01e9\u0007#\u0002\u0002\u01e9\u01ea\u0005@!\u0007\u01ea\u01f3",
    "\u0003\u0002\u0002\u0002\u01eb\u01f3\u0007Z\u0002\u0002\u01ec\u01f3",
    "\u0007[\u0002\u0002\u01ed\u01ef\u0007\\\u0002\u0002\u01ee\u01f0\u0005",
    "@!\u0002\u01ef\u01ee\u0003\u0002\u0002\u0002\u01ef\u01f0\u0003\u0002",
    "\u0002\u0002\u01f0\u01f3\u0003\u0002\u0002\u0002\u01f1\u01f3\u0007]",
    "\u0002\u0002\u01f2\u017b\u0003\u0002\u0002\u0002\u01f2\u0184\u0003\u0002",
    "\u0002\u0002\u01f2\u0188\u0003\u0002\u0002\u0002\u01f2\u0193\u0003\u0002",
    "\u0002\u0002\u01f2\u0194\u0003\u0002\u0002\u0002\u01f2\u0195\u0003\u0002",
    "\u0002\u0002\u01f2\u0196\u0003\u0002\u0002\u0002\u01f2\u019a\u0003\u0002",
    "\u0002\u0002\u01f2\u01a1\u0003\u0002\u0002\u0002\u01f2\u01a3\u0003\u0002",
    "\u0002\u0002\u01f2\u01a8\u0003\u0002\u0002\u0002\u01f2\u01b0\u0003\u0002",
    "\u0002\u0002\u01f2\u01b5\u0003\u0002\u0002\u0002\u01f2\u01bc\u0003\u0002",
    "\u0002\u0002\u01f2\u01c3\u0003\u0002\u0002\u0002\u01f2\u01ca\u0003\u0002",
    "\u0002\u0002\u01f2\u01d3\u0003\u0002\u0002\u0002\u01f2\u01d8\u0003\u0002",
    "\u0002\u0002\u01f2\u01da\u0003\u0002\u0002\u0002\u01f2\u01dd\u0003\u0002",
    "\u0002\u0002\u01f2\u01e2\u0003\u0002\u0002\u0002\u01f2\u01e7\u0003\u0002",
    "\u0002\u0002\u01f2\u01eb\u0003\u0002\u0002\u0002\u01f2\u01ec\u0003\u0002",
    "\u0002\u0002\u01f2\u01ed\u0003\u0002\u0002\u0002\u01f2\u01f1\u0003\u0002",
    "\u0002\u0002\u01f3\u021f\u0003\u0002\u0002\u0002\u01f4\u01f5\f\u0013",
    "\u0002\u0002\u01f5\u01f6\t\u0007\u0002\u0002\u01f6\u021e\u0005@!\u0014",
    "\u01f7\u01f8\f\u0012\u0002\u0002\u01f8\u01f9\t\b\u0002\u0002\u01f9\u021e",
    "\u0005@!\u0013\u01fa\u01fb\f\u0011\u0002\u0002\u01fb\u01fc\t\t\u0002",
    "\u0002\u01fc\u021e\u0005@!\u0012\u01fd\u01fe\f\u0010\u0002\u0002\u01fe",
    "\u01ff\u0007R\u0002\u0002\u01ff\u021e\u0005@!\u0011\u0200\u0201\f\u000f",
    "\u0002\u0002\u0201\u0202\u0007S\u0002\u0002\u0202\u021e\u0005@!\u0010",
    "\u0203\u0204\f\u000e\u0002\u0002\u0204\u0205\t\n\u0002\u0002\u0205\u021e",
    "\u0005@!\u000f\u0206\u0207\f\r\u0002\u0002\u0207\u0208\u0007\u0017\u0002",
    "\u0002\u0208\u021e\u0005@!\u000e\u0209\u020a\f\"\u0002\u0002\u020a\u020b",
    "\u0007\u0007\u0002\u0002\u020b\u021e\u0007k\u0002\u0002\u020c\u020d",
    "\f \u0002\u0002\u020d\u020f\u0007\f\u0002\u0002\u020e\u0210\u0005B\"",
    "\u0002\u020f\u020e\u0003\u0002\u0002\u0002\u020f\u0210\u0003\u0002\u0002",
    "\u0002\u0210\u0211\u0003\u0002\u0002\u0002\u0211\u021e\u0007\r\u0002",
    "\u0002\u0212\u0213\f\u001e\u0002\u0002\u0213\u0214\u0007\u0010\u0002",
    "\u0002\u0214\u0215\u0005D#\u0002\u0215\u0216\u0007\u0012\u0002\u0002",
    "\u0216\u021e\u0003\u0002\u0002\u0002\u0217\u0218\f\u0015\u0002\u0002",
    "\u0218\u0219\u0007>\u0002\u0002\u0219\u021e\u00056\u001c\u0002\u021a",
    "\u021b\f\u0014\u0002\u0002\u021b\u021c\u0007?\u0002\u0002\u021c\u021e",
    "\u00056\u001c\u0002\u021d\u01f4\u0003\u0002\u0002\u0002\u021d\u01f7",
    "\u0003\u0002\u0002\u0002\u021d\u01fa\u0003\u0002\u0002\u0002\u021d\u01fd",
    "\u0003\u0002\u0002\u0002\u021d\u0200\u0003\u0002\u0002\u0002\u021d\u0203",
    "\u0003\u0002\u0002\u0002\u021d\u0206\u0003\u0002\u0002\u0002\u021d\u0209",
    "\u0003\u0002\u0002\u0002\u021d\u020c\u0003\u0002\u0002\u0002\u021d\u0212",
    "\u0003\u0002\u0002\u0002\u021d\u0217\u0003\u0002\u0002\u0002\u021d\u021a",
    "\u0003\u0002\u0002\u0002\u021e\u0221\u0003\u0002\u0002\u0002\u021f\u021d",
    "\u0003\u0002\u0002\u0002\u021f\u0220\u0003\u0002\u0002\u0002\u0220A",
    "\u0003\u0002\u0002\u0002\u0221\u021f\u0003\u0002\u0002\u0002\u0222\u0225",
    "\u0005D#\u0002\u0223\u0225\u0005F$\u0002\u0224\u0222\u0003\u0002\u0002",
    "\u0002\u0224\u0223\u0003\u0002\u0002\u0002\u0225C\u0003\u0002\u0002",
    "\u0002\u0226\u022f\u0005@!\u0002\u0227\u022b\u0007\u0011\u0002\u0002",
    "\u0228\u0229\u0007\u0012\u0002\u0002\u0229\u022b\u0007\u0010\u0002\u0002",
    "\u022a\u0227\u0003\u0002\u0002\u0002\u022a\u0228\u0003\u0002\u0002\u0002",
    "\u022b\u022c\u0003\u0002\u0002\u0002\u022c\u022e\u0005@!\u0002\u022d",
    "\u022a\u0003\u0002\u0002\u0002\u022e\u0231\u0003\u0002\u0002\u0002\u022f",
    "\u022d\u0003\u0002\u0002\u0002\u022f\u0230\u0003\u0002\u0002\u0002\u0230",
    "E\u0003\u0002\u0002\u0002\u0231\u022f\u0003\u0002\u0002\u0002\u0232",
    "\u0237\u0005H%\u0002\u0233\u0234\u0007\u0011\u0002\u0002\u0234\u0236",
    "\u0005H%\u0002\u0235\u0233\u0003\u0002\u0002\u0002\u0236\u0239\u0003",
    "\u0002\u0002\u0002\u0237\u0235\u0003\u0002\u0002\u0002\u0237\u0238\u0003",
    "\u0002\u0002\u0002\u0238G\u0003\u0002\u0002\u0002\u0239\u0237\u0003",
    "\u0002\u0002\u0002\u023a\u023b\u0007k\u0002\u0002\u023b\u023c\u0007",
    "^\u0002\u0002\u023c\u023d\u0005@!\u0002\u023dI\u0003\u0002\u0002\u0002",
    "\u023e\u0241\u0005@!\u0002\u023f\u0241\u00056\u001c\u0002\u0240\u023e",
    "\u0003\u0002\u0002\u0002\u0240\u023f\u0003\u0002\u0002\u0002\u0241K",
    "\u0003\u0002\u0002\u0002\u0242\u0247\u0005N(\u0002\u0243\u0244\u0007",
    "\u0011\u0002\u0002\u0244\u0246\u0005N(\u0002\u0245\u0243\u0003\u0002",
    "\u0002\u0002\u0246\u0249\u0003\u0002\u0002\u0002\u0247\u0245\u0003\u0002",
    "\u0002\u0002\u0247\u0248\u0003\u0002\u0002\u0002\u0248M\u0003\u0002",
    "\u0002\u0002\u0249\u0247\u0003\u0002\u0002\u0002\u024a\u024b\u0005P",
    ")\u0002\u024b\u024c\u0007\n\u0002\u0002\u024c\u024d\u0005J&\u0002\u024d",
    "O\u0003\u0002\u0002\u0002\u024e\u0253\u0005R*\u0002\u024f\u0250\u0007",
    "\u0011\u0002\u0002\u0250\u0252\u0005R*\u0002\u0251\u024f\u0003\u0002",
    "\u0002\u0002\u0252\u0255\u0003\u0002\u0002\u0002\u0253\u0251\u0003\u0002",
    "\u0002\u0002\u0253\u0254\u0003\u0002\u0002\u0002\u0254Q\u0003\u0002",
    "\u0002\u0002\u0255\u0253\u0003\u0002\u0002\u0002\u0256\u0257\b*\u0001",
    "\u0002\u0257\u0265\u0005Z.\u0002\u0258\u0265\u0007_\u0002\u0002\u0259",
    "\u0265\u0007k\u0002\u0002\u025a\u025b\u0007\f\u0002\u0002\u025b\u025e",
    "\u0005R*\u0002\u025c\u025d\u0007\u0011\u0002\u0002\u025d\u025f\u0005",
    "R*\u0002\u025e\u025c\u0003\u0002\u0002\u0002\u025f\u0260\u0003\u0002",
    "\u0002\u0002\u0260\u025e\u0003\u0002\u0002\u0002\u0260\u0261\u0003\u0002",
    "\u0002\u0002\u0261\u0262\u0003\u0002\u0002\u0002\u0262\u0263\u0007\r",
    "\u0002\u0002\u0263\u0265\u0003\u0002\u0002\u0002\u0264\u0256\u0003\u0002",
    "\u0002\u0002\u0264\u0258\u0003\u0002\u0002\u0002\u0264\u0259\u0003\u0002",
    "\u0002\u0002\u0264\u025a\u0003\u0002\u0002\u0002\u0265\u026b\u0003\u0002",
    "\u0002\u0002\u0266\u0267\f\u0003\u0002\u0002\u0267\u0268\u0007\n\u0002",
    "\u0002\u0268\u026a\u00056\u001c\u0002\u0269\u0266\u0003\u0002\u0002",
    "\u0002\u026a\u026d\u0003\u0002\u0002\u0002\u026b\u0269\u0003\u0002\u0002",
    "\u0002\u026b\u026c\u0003\u0002\u0002\u0002\u026cS\u0003\u0002\u0002",
    "\u0002\u026d\u026b\u0003\u0002\u0002\u0002\u026e\u0273\u0007k\u0002",
    "\u0002\u026f\u0270\u0007\u0011\u0002\u0002\u0270\u0272\u0007k\u0002",
    "\u0002\u0271\u026f\u0003\u0002\u0002\u0002\u0272\u0275\u0003\u0002\u0002",
    "\u0002\u0273\u0271\u0003\u0002\u0002\u0002\u0273\u0274\u0003\u0002\u0002",
    "\u0002\u0274U\u0003\u0002\u0002\u0002\u0275\u0273\u0003\u0002\u0002",
    "\u0002\u0276\u027b\u0005@!\u0002\u0277\u0278\u0007\u0011\u0002\u0002",
    "\u0278\u027a\u0005@!\u0002\u0279\u0277\u0003\u0002\u0002\u0002\u027a",
    "\u027d\u0003\u0002\u0002\u0002\u027b\u0279\u0003\u0002\u0002\u0002\u027b",
    "\u027c\u0003\u0002\u0002\u0002\u027cW\u0003\u0002\u0002\u0002\u027d",
    "\u027b\u0003\u0002\u0002\u0002\u027e\u0283\u0007k\u0002\u0002\u027f",
    "\u0280\u0007\u0007\u0002\u0002\u0280\u0282\u0007k\u0002\u0002\u0281",
    "\u027f\u0003\u0002\u0002\u0002\u0282\u0285\u0003\u0002\u0002\u0002\u0283",
    "\u0281\u0003\u0002\u0002\u0002\u0283\u0284\u0003\u0002\u0002\u0002\u0284",
    "Y\u0003\u0002\u0002\u0002\u0285\u0283\u0003\u0002\u0002\u0002\u0286",
    "\u0287\t\u000b\u0002\u0002\u0287[\u0003\u0002\u0002\u0002Cbiu{\u0088",
    "\u008d\u0094\u0098\u009c\u00a0\u00a3\u00a9\u00b1\u00b9\u00c0\u00c9\u00cf",
    "\u00d5\u00e0\u00e5\u00e9\u00ee\u00f5\u00f9\u0100\u0106\u010a\u010f\u0116",
    "\u011d\u0128\u012d\u0135\u013b\u0141\u0148\u0156\u0160\u0162\u0164\u016c",
    "\u0176\u0180\u018f\u019d\u01ae\u01bf\u01ef\u01f2\u020f\u021d\u021f\u0224",
    "\u022a\u022f\u0237\u0240\u0247\u0253\u0260\u0264\u026b\u0273\u027b\u0283"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'package'", "'{'", "'}'", "'import'", "'.'", 
                     "'*'", "'annotation'", "':'", "'@'", "'('", "')'", 
                     "'class'", "'assoc'", "'['", "','", "']'", "'+'", "'extends'", 
                     "'type'", "'='", "':='", "'part'", "'var'", "'val'", 
                     "'ordered'", "'unique'", "'source'", "'target'", "'fun'", 
                     "'pre'", "'post'", "'req'", "'->'", "'{|'", "'|}'", 
                     "'Bool'", "'Char'", "'Int'", "'Real'", "'String'", 
                     "'Unit'", "'Time'", "'Duration'", "'Class'", "'Set'", 
                     "'OSet'", "'Bag'", "'Seq'", "'Tuple'", "'!'", "'if'", 
                     "'then'", "'else'", "'while'", "'do'", "'for'", "'in'", 
                     "'..'", "'|'", "'is'", "'as'", "'/'", "'%'", "'inter'", 
                     "'\\'", "'++'", "'#'", "'^'", "'-'", "'union'", "'<='", 
                     "'>='", "'<'", "'>'", "'!='", "'isin'", "'!isin'", 
                     "'subset'", "'psubset'", "'&&'", "'||'", "'=>'", "'<=>'", 
                     "'assert'", "'~'", "'forall'", "'exists'", "'continue'", 
                     "'break'", "'return'", "'$result'", "'::'", "'_'", 
                     null, "':-'", null, null, null, null, null, "'null'", 
                     "'this'", null, null, null, null, null, null, null, 
                     "';'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, "Keyword", "SUCHTHAT", "DateLiteral", 
                      "DurationLiteral", "IntegerLiteral", "RealLiteral", 
                      "BooleanLiteral", "NullLiteral", "ThisLiteral", "CharacterLiteral", 
                      "StringLiteral", "Identifier", "CommentBorder", "COMMENT", 
                      "LINE_COMMENT", "WS", "SEP" ];

var ruleNames =  [ "model", "modelThings", "modelThing", "packageDeclaration", 
                   "importDeclaration", "annotationDeclaration", "annotation", 
                   "topDeclaration", "entityDeclaration", "typeParameters", 
                   "typeParameter", "typeBound", "extending", "block", "blockDeclaration", 
                   "memberDeclaration", "typeDeclaration", "propertyDeclaration", 
                   "propertyModifier", "functionDeclaration", "paramList", 
                   "param", "functionSpecification", "constraint", "multiplicity", 
                   "expressionOrStar", "type", "primitiveType", "classIdentifier", 
                   "collectionKind", "typeArguments", "expression", "argumentList", 
                   "positionalArgumentList", "namedArgumentList", "namedArgument", 
                   "collectionOrType", "rngBindingList", "rngBinding", "patternList", 
                   "pattern", "identifierList", "expressionList", "qualifiedName", 
                   "literal" ];

function ModelParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

ModelParser.prototype = Object.create(antlr4.Parser.prototype);
ModelParser.prototype.constructor = ModelParser;

Object.defineProperty(ModelParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

ModelParser.EOF = antlr4.Token.EOF;
ModelParser.T__0 = 1;
ModelParser.T__1 = 2;
ModelParser.T__2 = 3;
ModelParser.T__3 = 4;
ModelParser.T__4 = 5;
ModelParser.T__5 = 6;
ModelParser.T__6 = 7;
ModelParser.T__7 = 8;
ModelParser.T__8 = 9;
ModelParser.T__9 = 10;
ModelParser.T__10 = 11;
ModelParser.T__11 = 12;
ModelParser.T__12 = 13;
ModelParser.T__13 = 14;
ModelParser.T__14 = 15;
ModelParser.T__15 = 16;
ModelParser.T__16 = 17;
ModelParser.T__17 = 18;
ModelParser.T__18 = 19;
ModelParser.T__19 = 20;
ModelParser.T__20 = 21;
ModelParser.T__21 = 22;
ModelParser.T__22 = 23;
ModelParser.T__23 = 24;
ModelParser.T__24 = 25;
ModelParser.T__25 = 26;
ModelParser.T__26 = 27;
ModelParser.T__27 = 28;
ModelParser.T__28 = 29;
ModelParser.T__29 = 30;
ModelParser.T__30 = 31;
ModelParser.T__31 = 32;
ModelParser.T__32 = 33;
ModelParser.T__33 = 34;
ModelParser.T__34 = 35;
ModelParser.T__35 = 36;
ModelParser.T__36 = 37;
ModelParser.T__37 = 38;
ModelParser.T__38 = 39;
ModelParser.T__39 = 40;
ModelParser.T__40 = 41;
ModelParser.T__41 = 42;
ModelParser.T__42 = 43;
ModelParser.T__43 = 44;
ModelParser.T__44 = 45;
ModelParser.T__45 = 46;
ModelParser.T__46 = 47;
ModelParser.T__47 = 48;
ModelParser.T__48 = 49;
ModelParser.T__49 = 50;
ModelParser.T__50 = 51;
ModelParser.T__51 = 52;
ModelParser.T__52 = 53;
ModelParser.T__53 = 54;
ModelParser.T__54 = 55;
ModelParser.T__55 = 56;
ModelParser.T__56 = 57;
ModelParser.T__57 = 58;
ModelParser.T__58 = 59;
ModelParser.T__59 = 60;
ModelParser.T__60 = 61;
ModelParser.T__61 = 62;
ModelParser.T__62 = 63;
ModelParser.T__63 = 64;
ModelParser.T__64 = 65;
ModelParser.T__65 = 66;
ModelParser.T__66 = 67;
ModelParser.T__67 = 68;
ModelParser.T__68 = 69;
ModelParser.T__69 = 70;
ModelParser.T__70 = 71;
ModelParser.T__71 = 72;
ModelParser.T__72 = 73;
ModelParser.T__73 = 74;
ModelParser.T__74 = 75;
ModelParser.T__75 = 76;
ModelParser.T__76 = 77;
ModelParser.T__77 = 78;
ModelParser.T__78 = 79;
ModelParser.T__79 = 80;
ModelParser.T__80 = 81;
ModelParser.T__81 = 82;
ModelParser.T__82 = 83;
ModelParser.T__83 = 84;
ModelParser.T__84 = 85;
ModelParser.T__85 = 86;
ModelParser.T__86 = 87;
ModelParser.T__87 = 88;
ModelParser.T__88 = 89;
ModelParser.T__89 = 90;
ModelParser.T__90 = 91;
ModelParser.T__91 = 92;
ModelParser.T__92 = 93;
ModelParser.Keyword = 94;
ModelParser.SUCHTHAT = 95;
ModelParser.DateLiteral = 96;
ModelParser.DurationLiteral = 97;
ModelParser.IntegerLiteral = 98;
ModelParser.RealLiteral = 99;
ModelParser.BooleanLiteral = 100;
ModelParser.NullLiteral = 101;
ModelParser.ThisLiteral = 102;
ModelParser.CharacterLiteral = 103;
ModelParser.StringLiteral = 104;
ModelParser.Identifier = 105;
ModelParser.CommentBorder = 106;
ModelParser.COMMENT = 107;
ModelParser.LINE_COMMENT = 108;
ModelParser.WS = 109;
ModelParser.SEP = 110;

ModelParser.RULE_model = 0;
ModelParser.RULE_modelThings = 1;
ModelParser.RULE_modelThing = 2;
ModelParser.RULE_packageDeclaration = 3;
ModelParser.RULE_importDeclaration = 4;
ModelParser.RULE_annotationDeclaration = 5;
ModelParser.RULE_annotation = 6;
ModelParser.RULE_topDeclaration = 7;
ModelParser.RULE_entityDeclaration = 8;
ModelParser.RULE_typeParameters = 9;
ModelParser.RULE_typeParameter = 10;
ModelParser.RULE_typeBound = 11;
ModelParser.RULE_extending = 12;
ModelParser.RULE_block = 13;
ModelParser.RULE_blockDeclaration = 14;
ModelParser.RULE_memberDeclaration = 15;
ModelParser.RULE_typeDeclaration = 16;
ModelParser.RULE_propertyDeclaration = 17;
ModelParser.RULE_propertyModifier = 18;
ModelParser.RULE_functionDeclaration = 19;
ModelParser.RULE_paramList = 20;
ModelParser.RULE_param = 21;
ModelParser.RULE_functionSpecification = 22;
ModelParser.RULE_constraint = 23;
ModelParser.RULE_multiplicity = 24;
ModelParser.RULE_expressionOrStar = 25;
ModelParser.RULE_type = 26;
ModelParser.RULE_primitiveType = 27;
ModelParser.RULE_classIdentifier = 28;
ModelParser.RULE_collectionKind = 29;
ModelParser.RULE_typeArguments = 30;
ModelParser.RULE_expression = 31;
ModelParser.RULE_argumentList = 32;
ModelParser.RULE_positionalArgumentList = 33;
ModelParser.RULE_namedArgumentList = 34;
ModelParser.RULE_namedArgument = 35;
ModelParser.RULE_collectionOrType = 36;
ModelParser.RULE_rngBindingList = 37;
ModelParser.RULE_rngBinding = 38;
ModelParser.RULE_patternList = 39;
ModelParser.RULE_pattern = 40;
ModelParser.RULE_identifierList = 41;
ModelParser.RULE_expressionList = 42;
ModelParser.RULE_qualifiedName = 43;
ModelParser.RULE_literal = 44;

function ModelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_model;
    return this;
}

ModelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModelContext.prototype.constructor = ModelContext;

ModelContext.prototype.modelThings = function() {
    return this.getTypedRuleContext(ModelThingsContext,0);
};

ModelContext.prototype.EOF = function() {
    return this.getToken(ModelParser.EOF, 0);
};

ModelContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterModel(this);
	}
};

ModelContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitModel(this);
	}
};




ModelParser.ModelContext = ModelContext;

ModelParser.prototype.model = function() {

    var localctx = new ModelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, ModelParser.RULE_model);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 90;
        this.modelThings();
        this.state = 91;
        this.match(ModelParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModelThingsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_modelThings;
    return this;
}

ModelThingsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModelThingsContext.prototype.constructor = ModelThingsContext;

ModelThingsContext.prototype.modelThing = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModelThingContext);
    } else {
        return this.getTypedRuleContext(ModelThingContext,i);
    }
};

ModelThingsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterModelThings(this);
	}
};

ModelThingsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitModelThings(this);
	}
};




ModelParser.ModelThingsContext = ModelThingsContext;

ModelParser.prototype.modelThings = function() {

    var localctx = new ModelThingsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, ModelParser.RULE_modelThings);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 96;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 93;
                this.modelThing(); 
            }
            this.state = 98;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModelThingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_modelThing;
    return this;
}

ModelThingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModelThingContext.prototype.constructor = ModelThingContext;

ModelThingContext.prototype.packageDeclaration = function() {
    return this.getTypedRuleContext(PackageDeclarationContext,0);
};

ModelThingContext.prototype.importDeclaration = function() {
    return this.getTypedRuleContext(ImportDeclarationContext,0);
};

ModelThingContext.prototype.annotationDeclaration = function() {
    return this.getTypedRuleContext(AnnotationDeclarationContext,0);
};

ModelThingContext.prototype.topDeclaration = function() {
    return this.getTypedRuleContext(TopDeclarationContext,0);
};

ModelThingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterModelThing(this);
	}
};

ModelThingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitModelThing(this);
	}
};




ModelParser.ModelThingContext = ModelThingContext;

ModelParser.prototype.modelThing = function() {

    var localctx = new ModelThingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, ModelParser.RULE_modelThing);
    try {
        this.state = 103;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ModelParser.T__0:
            this.enterOuterAlt(localctx, 1);
            this.state = 99;
            this.packageDeclaration();
            break;
        case ModelParser.T__3:
            this.enterOuterAlt(localctx, 2);
            this.state = 100;
            this.importDeclaration();
            break;
        case ModelParser.T__6:
            this.enterOuterAlt(localctx, 3);
            this.state = 101;
            this.annotationDeclaration();
            break;
        case ModelParser.T__1:
        case ModelParser.T__8:
        case ModelParser.T__9:
        case ModelParser.T__11:
        case ModelParser.T__12:
        case ModelParser.T__18:
        case ModelParser.T__21:
        case ModelParser.T__22:
        case ModelParser.T__23:
        case ModelParser.T__24:
        case ModelParser.T__25:
        case ModelParser.T__26:
        case ModelParser.T__27:
        case ModelParser.T__28:
        case ModelParser.T__31:
        case ModelParser.T__33:
        case ModelParser.T__35:
        case ModelParser.T__36:
        case ModelParser.T__37:
        case ModelParser.T__38:
        case ModelParser.T__39:
        case ModelParser.T__40:
        case ModelParser.T__41:
        case ModelParser.T__42:
        case ModelParser.T__43:
        case ModelParser.T__44:
        case ModelParser.T__45:
        case ModelParser.T__46:
        case ModelParser.T__47:
        case ModelParser.T__48:
        case ModelParser.T__49:
        case ModelParser.T__50:
        case ModelParser.T__53:
        case ModelParser.T__55:
        case ModelParser.T__68:
        case ModelParser.T__83:
        case ModelParser.T__85:
        case ModelParser.T__86:
        case ModelParser.T__87:
        case ModelParser.T__88:
        case ModelParser.T__89:
        case ModelParser.T__90:
        case ModelParser.T__92:
        case ModelParser.DateLiteral:
        case ModelParser.DurationLiteral:
        case ModelParser.IntegerLiteral:
        case ModelParser.RealLiteral:
        case ModelParser.BooleanLiteral:
        case ModelParser.NullLiteral:
        case ModelParser.ThisLiteral:
        case ModelParser.CharacterLiteral:
        case ModelParser.StringLiteral:
        case ModelParser.Identifier:
            this.enterOuterAlt(localctx, 4);
            this.state = 102;
            this.topDeclaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PackageDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_packageDeclaration;
    return this;
}

PackageDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PackageDeclarationContext.prototype.constructor = PackageDeclarationContext;

PackageDeclarationContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

PackageDeclarationContext.prototype.modelThings = function() {
    return this.getTypedRuleContext(ModelThingsContext,0);
};

PackageDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterPackageDeclaration(this);
	}
};

PackageDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitPackageDeclaration(this);
	}
};




ModelParser.PackageDeclarationContext = PackageDeclarationContext;

ModelParser.prototype.packageDeclaration = function() {

    var localctx = new PackageDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, ModelParser.RULE_packageDeclaration);
    try {
        this.state = 115;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 105;
            this.match(ModelParser.T__0);
            this.state = 106;
            this.qualifiedName();
            this.state = 107;
            this.match(ModelParser.T__1);
            this.state = 108;
            this.modelThings();
            this.state = 109;
            this.match(ModelParser.T__2);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 111;
            this.match(ModelParser.T__0);
            this.state = 112;
            this.qualifiedName();
            this.state = 113;
            this.modelThings();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_importDeclaration;
    return this;
}

ImportDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDeclarationContext.prototype.constructor = ImportDeclarationContext;

ImportDeclarationContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

ImportDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterImportDeclaration(this);
	}
};

ImportDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitImportDeclaration(this);
	}
};




ModelParser.ImportDeclarationContext = ImportDeclarationContext;

ModelParser.prototype.importDeclaration = function() {

    var localctx = new ImportDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, ModelParser.RULE_importDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 117;
        this.match(ModelParser.T__3);
        this.state = 118;
        this.qualifiedName();
        this.state = 121;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ModelParser.T__4) {
            this.state = 119;
            this.match(ModelParser.T__4);
            this.state = 120;
            this.match(ModelParser.T__5);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_annotationDeclaration;
    return this;
}

AnnotationDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationDeclarationContext.prototype.constructor = AnnotationDeclarationContext;

AnnotationDeclarationContext.prototype.Identifier = function() {
    return this.getToken(ModelParser.Identifier, 0);
};

AnnotationDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

AnnotationDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterAnnotationDeclaration(this);
	}
};

AnnotationDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitAnnotationDeclaration(this);
	}
};




ModelParser.AnnotationDeclarationContext = AnnotationDeclarationContext;

ModelParser.prototype.annotationDeclaration = function() {

    var localctx = new AnnotationDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, ModelParser.RULE_annotationDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 123;
        this.match(ModelParser.T__6);
        this.state = 124;
        this.match(ModelParser.Identifier);
        this.state = 125;
        this.match(ModelParser.T__7);
        this.state = 126;
        this.type(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_annotation;
    return this;
}

AnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationContext.prototype.constructor = AnnotationContext;

AnnotationContext.prototype.Identifier = function() {
    return this.getToken(ModelParser.Identifier, 0);
};

AnnotationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

AnnotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterAnnotation(this);
	}
};

AnnotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitAnnotation(this);
	}
};




ModelParser.AnnotationContext = AnnotationContext;

ModelParser.prototype.annotation = function() {

    var localctx = new AnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, ModelParser.RULE_annotation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 128;
        this.match(ModelParser.T__8);
        this.state = 129;
        this.match(ModelParser.Identifier);
        this.state = 134;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        if(la_===1) {
            this.state = 130;
            this.match(ModelParser.T__9);
            this.state = 131;
            this.expression(0);
            this.state = 132;
            this.match(ModelParser.T__10);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TopDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_topDeclaration;
    return this;
}

TopDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TopDeclarationContext.prototype.constructor = TopDeclarationContext;

TopDeclarationContext.prototype.entityDeclaration = function() {
    return this.getTypedRuleContext(EntityDeclarationContext,0);
};

TopDeclarationContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

TopDeclarationContext.prototype.memberDeclaration = function() {
    return this.getTypedRuleContext(MemberDeclarationContext,0);
};

TopDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterTopDeclaration(this);
	}
};

TopDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitTopDeclaration(this);
	}
};




ModelParser.TopDeclarationContext = TopDeclarationContext;

ModelParser.prototype.topDeclaration = function() {

    var localctx = new TopDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, ModelParser.RULE_topDeclaration);
    var _la = 0; // Token type
    try {
        this.state = 150;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 139;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ModelParser.T__8) {
                this.state = 136;
                this.annotation();
                this.state = 141;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 142;
            this.entityDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 146;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ModelParser.T__8) {
                this.state = 143;
                this.annotation();
                this.state = 148;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 149;
            this.memberDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EntityDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_entityDeclaration;
    return this;
}

EntityDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EntityDeclarationContext.prototype.constructor = EntityDeclarationContext;

EntityDeclarationContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ModelParser.Identifier);
    } else {
        return this.getToken(ModelParser.Identifier, i);
    }
};


EntityDeclarationContext.prototype.Keyword = function() {
    return this.getToken(ModelParser.Keyword, 0);
};

EntityDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

EntityDeclarationContext.prototype.extending = function() {
    return this.getTypedRuleContext(ExtendingContext,0);
};

EntityDeclarationContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

EntityDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterEntityDeclaration(this);
	}
};

EntityDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitEntityDeclaration(this);
	}
};




ModelParser.EntityDeclarationContext = EntityDeclarationContext;

ModelParser.prototype.entityDeclaration = function() {

    var localctx = new EntityDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, ModelParser.RULE_entityDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 152;
        _la = this._input.LA(1);
        if(!(_la===ModelParser.T__11 || _la===ModelParser.T__12 || _la===ModelParser.Identifier)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 154;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ModelParser.Keyword) {
            this.state = 153;
            this.match(ModelParser.Keyword);
        }

        this.state = 156;
        this.match(ModelParser.Identifier);
        this.state = 158;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ModelParser.T__13) {
            this.state = 157;
            this.typeParameters();
        }

        this.state = 161;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ModelParser.T__17) {
            this.state = 160;
            this.extending();
        }

        this.state = 167;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
        if(la_===1) {
            this.state = 163;
            this.match(ModelParser.T__1);
            this.state = 164;
            this.block();
            this.state = 165;
            this.match(ModelParser.T__2);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_typeParameters;
    return this;
}

TypeParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParametersContext.prototype.constructor = TypeParametersContext;

TypeParametersContext.prototype.typeParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeParameterContext);
    } else {
        return this.getTypedRuleContext(TypeParameterContext,i);
    }
};

TypeParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterTypeParameters(this);
	}
};

TypeParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitTypeParameters(this);
	}
};




ModelParser.TypeParametersContext = TypeParametersContext;

ModelParser.prototype.typeParameters = function() {

    var localctx = new TypeParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, ModelParser.RULE_typeParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 169;
        this.match(ModelParser.T__13);
        this.state = 170;
        this.typeParameter();
        this.state = 175;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ModelParser.T__14) {
            this.state = 171;
            this.match(ModelParser.T__14);
            this.state = 172;
            this.typeParameter();
            this.state = 177;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 178;
        this.match(ModelParser.T__15);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_typeParameter;
    return this;
}

TypeParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterContext.prototype.constructor = TypeParameterContext;

TypeParameterContext.prototype.Identifier = function() {
    return this.getToken(ModelParser.Identifier, 0);
};

TypeParameterContext.prototype.typeBound = function() {
    return this.getTypedRuleContext(TypeBoundContext,0);
};

TypeParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterTypeParameter(this);
	}
};

TypeParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitTypeParameter(this);
	}
};




ModelParser.TypeParameterContext = TypeParameterContext;

ModelParser.prototype.typeParameter = function() {

    var localctx = new TypeParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, ModelParser.RULE_typeParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 180;
        this.match(ModelParser.Identifier);
        this.state = 183;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ModelParser.T__7) {
            this.state = 181;
            this.match(ModelParser.T__7);
            this.state = 182;
            this.typeBound();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeBoundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_typeBound;
    return this;
}

TypeBoundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeBoundContext.prototype.constructor = TypeBoundContext;

TypeBoundContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

TypeBoundContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterTypeBound(this);
	}
};

TypeBoundContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitTypeBound(this);
	}
};




ModelParser.TypeBoundContext = TypeBoundContext;

ModelParser.prototype.typeBound = function() {

    var localctx = new TypeBoundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, ModelParser.RULE_typeBound);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 185;
        this.type(0);
        this.state = 190;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ModelParser.T__16) {
            this.state = 186;
            this.match(ModelParser.T__16);
            this.state = 187;
            this.type(0);
            this.state = 192;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtendingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_extending;
    return this;
}

ExtendingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendingContext.prototype.constructor = ExtendingContext;

ExtendingContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

ExtendingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterExtending(this);
	}
};

ExtendingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitExtending(this);
	}
};




ModelParser.ExtendingContext = ExtendingContext;

ModelParser.prototype.extending = function() {

    var localctx = new ExtendingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, ModelParser.RULE_extending);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 193;
        this.match(ModelParser.T__17);
        this.state = 194;
        this.type(0);
        this.state = 199;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ModelParser.T__14) {
            this.state = 195;
            this.match(ModelParser.T__14);
            this.state = 196;
            this.type(0);
            this.state = 201;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.blockDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockDeclarationContext);
    } else {
        return this.getTypedRuleContext(BlockDeclarationContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitBlock(this);
	}
};




ModelParser.BlockContext = BlockContext;

ModelParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, ModelParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 205;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ModelParser.T__1) | (1 << ModelParser.T__8) | (1 << ModelParser.T__9) | (1 << ModelParser.T__11) | (1 << ModelParser.T__12) | (1 << ModelParser.T__18) | (1 << ModelParser.T__21) | (1 << ModelParser.T__22) | (1 << ModelParser.T__23) | (1 << ModelParser.T__24) | (1 << ModelParser.T__25) | (1 << ModelParser.T__26) | (1 << ModelParser.T__27) | (1 << ModelParser.T__28))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ModelParser.T__31 - 32)) | (1 << (ModelParser.T__33 - 32)) | (1 << (ModelParser.T__35 - 32)) | (1 << (ModelParser.T__36 - 32)) | (1 << (ModelParser.T__37 - 32)) | (1 << (ModelParser.T__38 - 32)) | (1 << (ModelParser.T__39 - 32)) | (1 << (ModelParser.T__40 - 32)) | (1 << (ModelParser.T__41 - 32)) | (1 << (ModelParser.T__42 - 32)) | (1 << (ModelParser.T__43 - 32)) | (1 << (ModelParser.T__44 - 32)) | (1 << (ModelParser.T__45 - 32)) | (1 << (ModelParser.T__46 - 32)) | (1 << (ModelParser.T__47 - 32)) | (1 << (ModelParser.T__48 - 32)) | (1 << (ModelParser.T__49 - 32)) | (1 << (ModelParser.T__50 - 32)) | (1 << (ModelParser.T__53 - 32)) | (1 << (ModelParser.T__55 - 32)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ModelParser.T__68 - 69)) | (1 << (ModelParser.T__83 - 69)) | (1 << (ModelParser.T__85 - 69)) | (1 << (ModelParser.T__86 - 69)) | (1 << (ModelParser.T__87 - 69)) | (1 << (ModelParser.T__88 - 69)) | (1 << (ModelParser.T__89 - 69)) | (1 << (ModelParser.T__90 - 69)) | (1 << (ModelParser.T__92 - 69)) | (1 << (ModelParser.DateLiteral - 69)) | (1 << (ModelParser.DurationLiteral - 69)) | (1 << (ModelParser.IntegerLiteral - 69)) | (1 << (ModelParser.RealLiteral - 69)) | (1 << (ModelParser.BooleanLiteral - 69)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (ModelParser.NullLiteral - 101)) | (1 << (ModelParser.ThisLiteral - 101)) | (1 << (ModelParser.CharacterLiteral - 101)) | (1 << (ModelParser.StringLiteral - 101)) | (1 << (ModelParser.Identifier - 101)))) !== 0)) {
            this.state = 202;
            this.blockDeclaration();
            this.state = 207;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_blockDeclaration;
    return this;
}

BlockDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockDeclarationContext.prototype.constructor = BlockDeclarationContext;

BlockDeclarationContext.prototype.memberDeclaration = function() {
    return this.getTypedRuleContext(MemberDeclarationContext,0);
};

BlockDeclarationContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

BlockDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterBlockDeclaration(this);
	}
};

BlockDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitBlockDeclaration(this);
	}
};




ModelParser.BlockDeclarationContext = BlockDeclarationContext;

ModelParser.prototype.blockDeclaration = function() {

    var localctx = new BlockDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, ModelParser.RULE_blockDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 211;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ModelParser.T__8) {
            this.state = 208;
            this.annotation();
            this.state = 213;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 214;
        this.memberDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MemberDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_memberDeclaration;
    return this;
}

MemberDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberDeclarationContext.prototype.constructor = MemberDeclarationContext;

MemberDeclarationContext.prototype.typeDeclaration = function() {
    return this.getTypedRuleContext(TypeDeclarationContext,0);
};

MemberDeclarationContext.prototype.entityDeclaration = function() {
    return this.getTypedRuleContext(EntityDeclarationContext,0);
};

MemberDeclarationContext.prototype.propertyDeclaration = function() {
    return this.getTypedRuleContext(PropertyDeclarationContext,0);
};

MemberDeclarationContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

MemberDeclarationContext.prototype.constraint = function() {
    return this.getTypedRuleContext(ConstraintContext,0);
};

MemberDeclarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

MemberDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterMemberDeclaration(this);
	}
};

MemberDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitMemberDeclaration(this);
	}
};




ModelParser.MemberDeclarationContext = MemberDeclarationContext;

ModelParser.prototype.memberDeclaration = function() {

    var localctx = new MemberDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, ModelParser.RULE_memberDeclaration);
    try {
        this.state = 222;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 216;
            this.typeDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 217;
            this.entityDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 218;
            this.propertyDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 219;
            this.functionDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 220;
            this.constraint();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 221;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_typeDeclaration;
    return this;
}

TypeDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeDeclarationContext.prototype.constructor = TypeDeclarationContext;

TypeDeclarationContext.prototype.Identifier = function() {
    return this.getToken(ModelParser.Identifier, 0);
};

TypeDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

TypeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterTypeDeclaration(this);
	}
};

TypeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitTypeDeclaration(this);
	}
};




ModelParser.TypeDeclarationContext = TypeDeclarationContext;

ModelParser.prototype.typeDeclaration = function() {

    var localctx = new TypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, ModelParser.RULE_typeDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 224;
        this.match(ModelParser.T__18);
        this.state = 225;
        this.match(ModelParser.Identifier);
        this.state = 231;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ModelParser.T__13 || _la===ModelParser.T__19) {
            this.state = 227;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ModelParser.T__13) {
                this.state = 226;
                this.typeParameters();
            }

            this.state = 229;
            this.match(ModelParser.T__19);
            this.state = 230;
            this.type(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_propertyDeclaration;
    return this;
}

PropertyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDeclarationContext.prototype.constructor = PropertyDeclarationContext;

PropertyDeclarationContext.prototype.Identifier = function() {
    return this.getToken(ModelParser.Identifier, 0);
};

PropertyDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

PropertyDeclarationContext.prototype.propertyModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyModifierContext);
    } else {
        return this.getTypedRuleContext(PropertyModifierContext,i);
    }
};

PropertyDeclarationContext.prototype.multiplicity = function() {
    return this.getTypedRuleContext(MultiplicityContext,0);
};

PropertyDeclarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PropertyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterPropertyDeclaration(this);
	}
};

PropertyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitPropertyDeclaration(this);
	}
};




ModelParser.PropertyDeclarationContext = PropertyDeclarationContext;

ModelParser.prototype.propertyDeclaration = function() {

    var localctx = new PropertyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, ModelParser.RULE_propertyDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 236;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ModelParser.T__21) | (1 << ModelParser.T__22) | (1 << ModelParser.T__23) | (1 << ModelParser.T__24) | (1 << ModelParser.T__25) | (1 << ModelParser.T__26) | (1 << ModelParser.T__27))) !== 0)) {
            this.state = 233;
            this.propertyModifier();
            this.state = 238;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 239;
        this.match(ModelParser.Identifier);
        this.state = 240;
        this.match(ModelParser.T__7);
        this.state = 241;
        this.type(0);
        this.state = 243;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ModelParser.T__13) {
            this.state = 242;
            this.multiplicity();
        }

        this.state = 247;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ModelParser.T__19 || _la===ModelParser.T__20) {
            this.state = 245;
            _la = this._input.LA(1);
            if(!(_la===ModelParser.T__19 || _la===ModelParser.T__20)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 246;
            this.expression(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_propertyModifier;
    return this;
}

PropertyModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyModifierContext.prototype.constructor = PropertyModifierContext;


PropertyModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterPropertyModifier(this);
	}
};

PropertyModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitPropertyModifier(this);
	}
};




ModelParser.PropertyModifierContext = PropertyModifierContext;

ModelParser.prototype.propertyModifier = function() {

    var localctx = new PropertyModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, ModelParser.RULE_propertyModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 249;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ModelParser.T__21) | (1 << ModelParser.T__22) | (1 << ModelParser.T__23) | (1 << ModelParser.T__24) | (1 << ModelParser.T__25) | (1 << ModelParser.T__26) | (1 << ModelParser.T__27))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_functionDeclaration;
    return this;
}

FunctionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDeclarationContext.prototype.constructor = FunctionDeclarationContext;

FunctionDeclarationContext.prototype.Identifier = function() {
    return this.getToken(ModelParser.Identifier, 0);
};

FunctionDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

FunctionDeclarationContext.prototype.paramList = function() {
    return this.getTypedRuleContext(ParamListContext,0);
};

FunctionDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

FunctionDeclarationContext.prototype.functionSpecification = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionSpecificationContext);
    } else {
        return this.getTypedRuleContext(FunctionSpecificationContext,i);
    }
};

FunctionDeclarationContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FunctionDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterFunctionDeclaration(this);
	}
};

FunctionDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitFunctionDeclaration(this);
	}
};




ModelParser.FunctionDeclarationContext = FunctionDeclarationContext;

ModelParser.prototype.functionDeclaration = function() {

    var localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, ModelParser.RULE_functionDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 251;
        this.match(ModelParser.T__28);
        this.state = 252;
        this.match(ModelParser.Identifier);
        this.state = 254;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ModelParser.T__13) {
            this.state = 253;
            this.typeParameters();
        }

        this.state = 260;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        if(la_===1) {
            this.state = 256;
            this.match(ModelParser.T__9);
            this.state = 257;
            this.paramList();
            this.state = 258;
            this.match(ModelParser.T__10);

        }
        this.state = 264;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ModelParser.T__7) {
            this.state = 262;
            this.match(ModelParser.T__7);
            this.state = 263;
            this.type(0);
        }

        this.state = 269;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ModelParser.T__29 || _la===ModelParser.T__30) {
            this.state = 266;
            this.functionSpecification();
            this.state = 271;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 276;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        if(la_===1) {
            this.state = 272;
            this.match(ModelParser.T__1);
            this.state = 273;
            this.block();
            this.state = 274;
            this.match(ModelParser.T__2);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParamListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_paramList;
    return this;
}

ParamListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamListContext.prototype.constructor = ParamListContext;

ParamListContext.prototype.param = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParamContext);
    } else {
        return this.getTypedRuleContext(ParamContext,i);
    }
};

ParamListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterParamList(this);
	}
};

ParamListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitParamList(this);
	}
};




ModelParser.ParamListContext = ParamListContext;

ModelParser.prototype.paramList = function() {

    var localctx = new ParamListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, ModelParser.RULE_paramList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 278;
        this.param();
        this.state = 283;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ModelParser.T__14) {
            this.state = 279;
            this.match(ModelParser.T__14);
            this.state = 280;
            this.param();
            this.state = 285;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParamContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_param;
    return this;
}

ParamContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamContext.prototype.constructor = ParamContext;

ParamContext.prototype.Identifier = function() {
    return this.getToken(ModelParser.Identifier, 0);
};

ParamContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ParamContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterParam(this);
	}
};

ParamContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitParam(this);
	}
};




ModelParser.ParamContext = ParamContext;

ModelParser.prototype.param = function() {

    var localctx = new ParamContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, ModelParser.RULE_param);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 286;
        this.match(ModelParser.Identifier);
        this.state = 287;
        this.match(ModelParser.T__7);
        this.state = 288;
        this.type(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionSpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_functionSpecification;
    return this;
}

FunctionSpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionSpecificationContext.prototype.constructor = FunctionSpecificationContext;

FunctionSpecificationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FunctionSpecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterFunctionSpecification(this);
	}
};

FunctionSpecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitFunctionSpecification(this);
	}
};




ModelParser.FunctionSpecificationContext = FunctionSpecificationContext;

ModelParser.prototype.functionSpecification = function() {

    var localctx = new FunctionSpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, ModelParser.RULE_functionSpecification);
    try {
        this.state = 294;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ModelParser.T__29:
            this.enterOuterAlt(localctx, 1);
            this.state = 290;
            this.match(ModelParser.T__29);
            this.state = 291;
            this.expression(0);
            break;
        case ModelParser.T__30:
            this.enterOuterAlt(localctx, 2);
            this.state = 292;
            this.match(ModelParser.T__30);
            this.state = 293;
            this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_constraint;
    return this;
}

ConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintContext.prototype.constructor = ConstraintContext;

ConstraintContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConstraintContext.prototype.Identifier = function() {
    return this.getToken(ModelParser.Identifier, 0);
};

ConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterConstraint(this);
	}
};

ConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitConstraint(this);
	}
};




ModelParser.ConstraintContext = ConstraintContext;

ModelParser.prototype.constraint = function() {

    var localctx = new ConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, ModelParser.RULE_constraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 296;
        this.match(ModelParser.T__31);
        this.state = 299;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        if(la_===1) {
            this.state = 297;
            this.match(ModelParser.Identifier);
            this.state = 298;
            this.match(ModelParser.T__7);

        }
        this.state = 301;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiplicityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_multiplicity;
    return this;
}

MultiplicityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplicityContext.prototype.constructor = MultiplicityContext;

MultiplicityContext.prototype.expressionOrStar = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionOrStarContext);
    } else {
        return this.getTypedRuleContext(ExpressionOrStarContext,i);
    }
};

MultiplicityContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterMultiplicity(this);
	}
};

MultiplicityContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitMultiplicity(this);
	}
};




ModelParser.MultiplicityContext = MultiplicityContext;

ModelParser.prototype.multiplicity = function() {

    var localctx = new MultiplicityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, ModelParser.RULE_multiplicity);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 303;
        this.match(ModelParser.T__13);
        this.state = 304;
        this.expressionOrStar();
        this.state = 307;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ModelParser.T__14) {
            this.state = 305;
            this.match(ModelParser.T__14);
            this.state = 306;
            this.expressionOrStar();
        }

        this.state = 309;
        this.match(ModelParser.T__15);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionOrStarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_expressionOrStar;
    return this;
}

ExpressionOrStarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionOrStarContext.prototype.constructor = ExpressionOrStarContext;

ExpressionOrStarContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionOrStarContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterExpressionOrStar(this);
	}
};

ExpressionOrStarContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitExpressionOrStar(this);
	}
};




ModelParser.ExpressionOrStarContext = ExpressionOrStarContext;

ModelParser.prototype.expressionOrStar = function() {

    var localctx = new ExpressionOrStarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, ModelParser.RULE_expressionOrStar);
    try {
        this.state = 313;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ModelParser.T__1:
        case ModelParser.T__9:
        case ModelParser.T__33:
        case ModelParser.T__35:
        case ModelParser.T__36:
        case ModelParser.T__37:
        case ModelParser.T__38:
        case ModelParser.T__39:
        case ModelParser.T__40:
        case ModelParser.T__41:
        case ModelParser.T__42:
        case ModelParser.T__43:
        case ModelParser.T__44:
        case ModelParser.T__45:
        case ModelParser.T__46:
        case ModelParser.T__47:
        case ModelParser.T__48:
        case ModelParser.T__49:
        case ModelParser.T__50:
        case ModelParser.T__53:
        case ModelParser.T__55:
        case ModelParser.T__68:
        case ModelParser.T__83:
        case ModelParser.T__85:
        case ModelParser.T__86:
        case ModelParser.T__87:
        case ModelParser.T__88:
        case ModelParser.T__89:
        case ModelParser.T__90:
        case ModelParser.T__92:
        case ModelParser.DateLiteral:
        case ModelParser.DurationLiteral:
        case ModelParser.IntegerLiteral:
        case ModelParser.RealLiteral:
        case ModelParser.BooleanLiteral:
        case ModelParser.NullLiteral:
        case ModelParser.ThisLiteral:
        case ModelParser.CharacterLiteral:
        case ModelParser.StringLiteral:
        case ModelParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 311;
            this.expression(0);
            break;
        case ModelParser.T__5:
            this.enterOuterAlt(localctx, 2);
            this.state = 312;
            this.match(ModelParser.T__5);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;


 
TypeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ArrayTypeContext(parser, ctx) {
	TypeContext.call(this, parser);
    TypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrayTypeContext.prototype = Object.create(TypeContext.prototype);
ArrayTypeContext.prototype.constructor = ArrayTypeContext;

ModelParser.ArrayTypeContext = ArrayTypeContext;

ArrayTypeContext.prototype.classIdentifier = function() {
    return this.getTypedRuleContext(ClassIdentifierContext,0);
};
ArrayTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterArrayType(this);
	}
};

ArrayTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitArrayType(this);
	}
};


function SubTypeContext(parser, ctx) {
	TypeContext.call(this, parser);
    TypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubTypeContext.prototype = Object.create(TypeContext.prototype);
SubTypeContext.prototype.constructor = SubTypeContext;

ModelParser.SubTypeContext = SubTypeContext;

SubTypeContext.prototype.Identifier = function() {
    return this.getToken(ModelParser.Identifier, 0);
};

SubTypeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

SubTypeContext.prototype.SUCHTHAT = function() {
    return this.getToken(ModelParser.SUCHTHAT, 0);
};

SubTypeContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SubTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterSubType(this);
	}
};

SubTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitSubType(this);
	}
};


function IdentTypeContext(parser, ctx) {
	TypeContext.call(this, parser);
    TypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IdentTypeContext.prototype = Object.create(TypeContext.prototype);
IdentTypeContext.prototype.constructor = IdentTypeContext;

ModelParser.IdentTypeContext = IdentTypeContext;

IdentTypeContext.prototype.classIdentifier = function() {
    return this.getTypedRuleContext(ClassIdentifierContext,0);
};

IdentTypeContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};
IdentTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterIdentType(this);
	}
};

IdentTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitIdentType(this);
	}
};


function FuncTypeContext(parser, ctx) {
	TypeContext.call(this, parser);
    TypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FuncTypeContext.prototype = Object.create(TypeContext.prototype);
FuncTypeContext.prototype.constructor = FuncTypeContext;

ModelParser.FuncTypeContext = FuncTypeContext;

FuncTypeContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};
FuncTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterFuncType(this);
	}
};

FuncTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitFuncType(this);
	}
};


function CartesianTypeContext(parser, ctx) {
	TypeContext.call(this, parser);
    TypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CartesianTypeContext.prototype = Object.create(TypeContext.prototype);
CartesianTypeContext.prototype.constructor = CartesianTypeContext;

ModelParser.CartesianTypeContext = CartesianTypeContext;

CartesianTypeContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};
CartesianTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterCartesianType(this);
	}
};

CartesianTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitCartesianType(this);
	}
};


function PrimTypeContext(parser, ctx) {
	TypeContext.call(this, parser);
    TypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrimTypeContext.prototype = Object.create(TypeContext.prototype);
PrimTypeContext.prototype.constructor = PrimTypeContext;

ModelParser.PrimTypeContext = PrimTypeContext;

PrimTypeContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};
PrimTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterPrimType(this);
	}
};

PrimTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitPrimType(this);
	}
};


function ParenTypeContext(parser, ctx) {
	TypeContext.call(this, parser);
    TypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenTypeContext.prototype = Object.create(TypeContext.prototype);
ParenTypeContext.prototype.constructor = ParenTypeContext;

ModelParser.ParenTypeContext = ParenTypeContext;

ParenTypeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};
ParenTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterParenType(this);
	}
};

ParenTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitParenType(this);
	}
};



ModelParser.prototype.type = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypeContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 52;
    this.enterRecursionRule(localctx, 52, ModelParser.RULE_type, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 340;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PrimTypeContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 316;
            this.primitiveType();
            break;

        case 2:
            localctx = new IdentTypeContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 317;
            this.classIdentifier();
            this.state = 319;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
            if(la_===1) {
                this.state = 318;
                this.typeArguments();

            }
            break;

        case 3:
            localctx = new ArrayTypeContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 321;
            this.classIdentifier();
            this.state = 324; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 322;
            		this.match(ModelParser.T__13);
            		this.state = 323;
            		this.match(ModelParser.T__15);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 326; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,35, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        case 4:
            localctx = new ParenTypeContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 328;
            this.match(ModelParser.T__9);
            this.state = 329;
            this.type(0);
            this.state = 330;
            this.match(ModelParser.T__10);
            break;

        case 5:
            localctx = new SubTypeContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 332;
            this.match(ModelParser.T__33);
            this.state = 333;
            this.match(ModelParser.Identifier);
            this.state = 334;
            this.match(ModelParser.T__7);
            this.state = 335;
            this.type(0);
            this.state = 336;
            this.match(ModelParser.SUCHTHAT);
            this.state = 337;
            this.expression(0);
            this.state = 338;
            this.match(ModelParser.T__34);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 354;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,39,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 352;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new FuncTypeContext(this, new TypeContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ModelParser.RULE_type);
                    this.state = 342;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 343;
                    this.match(ModelParser.T__32);
                    this.state = 344;
                    this.type(4);
                    break;

                case 2:
                    localctx = new CartesianTypeContext(this, new TypeContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ModelParser.RULE_type);
                    this.state = 345;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 348; 
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                    	switch (_alt) {
                    	case 1:
                    		this.state = 346;
                    		this.match(ModelParser.T__5);
                    		this.state = 347;
                    		this.type(0);
                    		break;
                    	default:
                    		throw new antlr4.error.NoViableAltException(this);
                    	}
                    	this.state = 350; 
                    	this._errHandler.sync(this);
                    	_alt = this._interp.adaptivePredict(this._input,37, this._ctx);
                    } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                    break;

                } 
            }
            this.state = 356;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,39,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function PrimitiveTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_primitiveType;
    return this;
}

PrimitiveTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimitiveTypeContext.prototype.constructor = PrimitiveTypeContext;


PrimitiveTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterPrimitiveType(this);
	}
};

PrimitiveTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitPrimitiveType(this);
	}
};




ModelParser.PrimitiveTypeContext = PrimitiveTypeContext;

ModelParser.prototype.primitiveType = function() {

    var localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, ModelParser.RULE_primitiveType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 357;
        _la = this._input.LA(1);
        if(!(((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ModelParser.T__35 - 36)) | (1 << (ModelParser.T__36 - 36)) | (1 << (ModelParser.T__37 - 36)) | (1 << (ModelParser.T__38 - 36)) | (1 << (ModelParser.T__39 - 36)) | (1 << (ModelParser.T__40 - 36)) | (1 << (ModelParser.T__41 - 36)) | (1 << (ModelParser.T__42 - 36)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_classIdentifier;
    return this;
}

ClassIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassIdentifierContext.prototype.constructor = ClassIdentifierContext;

ClassIdentifierContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

ClassIdentifierContext.prototype.collectionKind = function() {
    return this.getTypedRuleContext(CollectionKindContext,0);
};

ClassIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterClassIdentifier(this);
	}
};

ClassIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitClassIdentifier(this);
	}
};




ModelParser.ClassIdentifierContext = ClassIdentifierContext;

ModelParser.prototype.classIdentifier = function() {

    var localctx = new ClassIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, ModelParser.RULE_classIdentifier);
    try {
        this.state = 362;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ModelParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 359;
            this.qualifiedName();
            break;
        case ModelParser.T__43:
            this.enterOuterAlt(localctx, 2);
            this.state = 360;
            this.match(ModelParser.T__43);
            break;
        case ModelParser.T__44:
        case ModelParser.T__45:
        case ModelParser.T__46:
        case ModelParser.T__47:
            this.enterOuterAlt(localctx, 3);
            this.state = 361;
            this.collectionKind();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CollectionKindContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_collectionKind;
    return this;
}

CollectionKindContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CollectionKindContext.prototype.constructor = CollectionKindContext;


CollectionKindContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterCollectionKind(this);
	}
};

CollectionKindContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitCollectionKind(this);
	}
};




ModelParser.CollectionKindContext = CollectionKindContext;

ModelParser.prototype.collectionKind = function() {

    var localctx = new CollectionKindContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, ModelParser.RULE_collectionKind);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 364;
        _la = this._input.LA(1);
        if(!(((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (ModelParser.T__44 - 45)) | (1 << (ModelParser.T__45 - 45)) | (1 << (ModelParser.T__46 - 45)) | (1 << (ModelParser.T__47 - 45)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_typeArguments;
    return this;
}

TypeArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentsContext.prototype.constructor = TypeArgumentsContext;

TypeArgumentsContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

TypeArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterTypeArguments(this);
	}
};

TypeArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitTypeArguments(this);
	}
};




ModelParser.TypeArgumentsContext = TypeArgumentsContext;

ModelParser.prototype.typeArguments = function() {

    var localctx = new TypeArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, ModelParser.RULE_typeArguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 366;
        this.match(ModelParser.T__13);
        this.state = 367;
        this.type(0);
        this.state = 372;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ModelParser.T__14) {
            this.state = 368;
            this.match(ModelParser.T__14);
            this.state = 369;
            this.type(0);
            this.state = 374;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 375;
        this.match(ModelParser.T__15);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;


 
ExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function LiteralExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralExpContext.prototype = Object.create(ExpressionContext.prototype);
LiteralExpContext.prototype.constructor = LiteralExpContext;

ModelParser.LiteralExpContext = LiteralExpContext;

LiteralExpContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};
LiteralExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterLiteralExp(this);
	}
};

LiteralExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitLiteralExp(this);
	}
};


function NotExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotExpContext.prototype = Object.create(ExpressionContext.prototype);
NotExpContext.prototype.constructor = NotExpContext;

ModelParser.NotExpContext = NotExpContext;

NotExpContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
NotExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterNotExp(this);
	}
};

NotExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitNotExp(this);
	}
};


function AndExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AndExpContext.prototype = Object.create(ExpressionContext.prototype);
AndExpContext.prototype.constructor = AndExpContext;

ModelParser.AndExpContext = AndExpContext;

AndExpContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
AndExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterAndExp(this);
	}
};

AndExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitAndExp(this);
	}
};


function ExistsExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExistsExpContext.prototype = Object.create(ExpressionContext.prototype);
ExistsExpContext.prototype.constructor = ExistsExpContext;

ModelParser.ExistsExpContext = ExistsExpContext;

ExistsExpContext.prototype.rngBindingList = function() {
    return this.getTypedRuleContext(RngBindingListContext,0);
};

ExistsExpContext.prototype.SUCHTHAT = function() {
    return this.getToken(ModelParser.SUCHTHAT, 0);
};

ExistsExpContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ExistsExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterExistsExp(this);
	}
};

ExistsExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitExistsExp(this);
	}
};


function SetEnumExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetEnumExpContext.prototype = Object.create(ExpressionContext.prototype);
SetEnumExpContext.prototype.constructor = SetEnumExpContext;

ModelParser.SetEnumExpContext = SetEnumExpContext;

SetEnumExpContext.prototype.collectionKind = function() {
    return this.getTypedRuleContext(CollectionKindContext,0);
};

SetEnumExpContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};
SetEnumExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterSetEnumExp(this);
	}
};

SetEnumExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitSetEnumExp(this);
	}
};


function IndexExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IndexExpContext.prototype = Object.create(ExpressionContext.prototype);
IndexExpContext.prototype.constructor = IndexExpContext;

ModelParser.IndexExpContext = IndexExpContext;

IndexExpContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IndexExpContext.prototype.positionalArgumentList = function() {
    return this.getTypedRuleContext(PositionalArgumentListContext,0);
};
IndexExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterIndexExp(this);
	}
};

IndexExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitIndexExp(this);
	}
};


function BreakExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BreakExpContext.prototype = Object.create(ExpressionContext.prototype);
BreakExpContext.prototype.constructor = BreakExpContext;

ModelParser.BreakExpContext = BreakExpContext;

BreakExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterBreakExp(this);
	}
};

BreakExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitBreakExp(this);
	}
};


function PrevExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrevExpContext.prototype = Object.create(ExpressionContext.prototype);
PrevExpContext.prototype.constructor = PrevExpContext;

ModelParser.PrevExpContext = PrevExpContext;

PrevExpContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};
PrevExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterPrevExp(this);
	}
};

PrevExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitPrevExp(this);
	}
};


function BlockExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BlockExpContext.prototype = Object.create(ExpressionContext.prototype);
BlockExpContext.prototype.constructor = BlockExpContext;

ModelParser.BlockExpContext = BlockExpContext;

BlockExpContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};
BlockExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterBlockExp(this);
	}
};

BlockExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitBlockExp(this);
	}
};


function BinOp2ExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BinOp2ExpContext.prototype = Object.create(ExpressionContext.prototype);
BinOp2ExpContext.prototype.constructor = BinOp2ExpContext;

ModelParser.BinOp2ExpContext = BinOp2ExpContext;

BinOp2ExpContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
BinOp2ExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterBinOp2Exp(this);
	}
};

BinOp2ExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitBinOp2Exp(this);
	}
};


function TupleExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TupleExpContext.prototype = Object.create(ExpressionContext.prototype);
TupleExpContext.prototype.constructor = TupleExpContext;

ModelParser.TupleExpContext = TupleExpContext;

TupleExpContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
TupleExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterTupleExp(this);
	}
};

TupleExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitTupleExp(this);
	}
};


function WhileExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WhileExpContext.prototype = Object.create(ExpressionContext.prototype);
WhileExpContext.prototype.constructor = WhileExpContext;

ModelParser.WhileExpContext = WhileExpContext;

WhileExpContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
WhileExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterWhileExp(this);
	}
};

WhileExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitWhileExp(this);
	}
};


function SetRngExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetRngExpContext.prototype = Object.create(ExpressionContext.prototype);
SetRngExpContext.prototype.constructor = SetRngExpContext;

ModelParser.SetRngExpContext = SetRngExpContext;

SetRngExpContext.prototype.collectionKind = function() {
    return this.getTypedRuleContext(CollectionKindContext,0);
};

SetRngExpContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
SetRngExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterSetRngExp(this);
	}
};

SetRngExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitSetRngExp(this);
	}
};


function IfExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IfExpContext.prototype = Object.create(ExpressionContext.prototype);
IfExpContext.prototype.constructor = IfExpContext;

ModelParser.IfExpContext = IfExpContext;

IfExpContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
IfExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterIfExp(this);
	}
};

IfExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitIfExp(this);
	}
};


function NegExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NegExpContext.prototype = Object.create(ExpressionContext.prototype);
NegExpContext.prototype.constructor = NegExpContext;

ModelParser.NegExpContext = NegExpContext;

NegExpContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
NegExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterNegExp(this);
	}
};

NegExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitNegExp(this);
	}
};


function OrExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OrExpContext.prototype = Object.create(ExpressionContext.prototype);
OrExpContext.prototype.constructor = OrExpContext;

ModelParser.OrExpContext = OrExpContext;

OrExpContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
OrExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterOrExp(this);
	}
};

OrExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitOrExp(this);
	}
};


function AppExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AppExpContext.prototype = Object.create(ExpressionContext.prototype);
AppExpContext.prototype.constructor = AppExpContext;

ModelParser.AppExpContext = AppExpContext;

AppExpContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

AppExpContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};
AppExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterAppExp(this);
	}
};

AppExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitAppExp(this);
	}
};


function TypeCheckExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeCheckExpContext.prototype = Object.create(ExpressionContext.prototype);
TypeCheckExpContext.prototype.constructor = TypeCheckExpContext;

ModelParser.TypeCheckExpContext = TypeCheckExpContext;

TypeCheckExpContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

TypeCheckExpContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};
TypeCheckExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterTypeCheckExp(this);
	}
};

TypeCheckExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitTypeCheckExp(this);
	}
};


function ReturnExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReturnExpContext.prototype = Object.create(ExpressionContext.prototype);
ReturnExpContext.prototype.constructor = ReturnExpContext;

ModelParser.ReturnExpContext = ReturnExpContext;

ReturnExpContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ReturnExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterReturnExp(this);
	}
};

ReturnExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitReturnExp(this);
	}
};


function IFFExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IFFExpContext.prototype = Object.create(ExpressionContext.prototype);
IFFExpContext.prototype.constructor = IFFExpContext;

ModelParser.IFFExpContext = IFFExpContext;

IFFExpContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
IFFExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterIFFExp(this);
	}
};

IFFExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitIFFExp(this);
	}
};


function ConstructorAppExp2Context(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstructorAppExp2Context.prototype = Object.create(ExpressionContext.prototype);
ConstructorAppExp2Context.prototype.constructor = ConstructorAppExp2Context;

ModelParser.ConstructorAppExp2Context = ConstructorAppExp2Context;

ConstructorAppExp2Context.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ConstructorAppExp2Context.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};
ConstructorAppExp2Context.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterConstructorAppExp2(this);
	}
};

ConstructorAppExp2Context.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitConstructorAppExp2(this);
	}
};


function SetCompExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetCompExpContext.prototype = Object.create(ExpressionContext.prototype);
SetCompExpContext.prototype.constructor = SetCompExpContext;

ModelParser.SetCompExpContext = SetCompExpContext;

SetCompExpContext.prototype.collectionKind = function() {
    return this.getTypedRuleContext(CollectionKindContext,0);
};

SetCompExpContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SetCompExpContext.prototype.rngBindingList = function() {
    return this.getTypedRuleContext(RngBindingListContext,0);
};

SetCompExpContext.prototype.SUCHTHAT = function() {
    return this.getToken(ModelParser.SUCHTHAT, 0);
};
SetCompExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterSetCompExp(this);
	}
};

SetCompExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitSetCompExp(this);
	}
};


function ConstructorAppExp1Context(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstructorAppExp1Context.prototype = Object.create(ExpressionContext.prototype);
ConstructorAppExp1Context.prototype.constructor = ConstructorAppExp1Context;

ModelParser.ConstructorAppExp1Context = ConstructorAppExp1Context;

ConstructorAppExp1Context.prototype.classIdentifier = function() {
    return this.getTypedRuleContext(ClassIdentifierContext,0);
};

ConstructorAppExp1Context.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

ConstructorAppExp1Context.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};
ConstructorAppExp1Context.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterConstructorAppExp1(this);
	}
};

ConstructorAppExp1Context.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitConstructorAppExp1(this);
	}
};


function ResultExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ResultExpContext.prototype = Object.create(ExpressionContext.prototype);
ResultExpContext.prototype.constructor = ResultExpContext;

ModelParser.ResultExpContext = ResultExpContext;

ResultExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterResultExp(this);
	}
};

ResultExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitResultExp(this);
	}
};


function AssertExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssertExpContext.prototype = Object.create(ExpressionContext.prototype);
AssertExpContext.prototype.constructor = AssertExpContext;

ModelParser.AssertExpContext = AssertExpContext;

AssertExpContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
AssertExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterAssertExp(this);
	}
};

AssertExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitAssertExp(this);
	}
};


function LambdaExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LambdaExpContext.prototype = Object.create(ExpressionContext.prototype);
LambdaExpContext.prototype.constructor = LambdaExpContext;

ModelParser.LambdaExpContext = LambdaExpContext;

LambdaExpContext.prototype.pattern = function() {
    return this.getTypedRuleContext(PatternContext,0);
};

LambdaExpContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
LambdaExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterLambdaExp(this);
	}
};

LambdaExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitLambdaExp(this);
	}
};


function BinOp1ExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BinOp1ExpContext.prototype = Object.create(ExpressionContext.prototype);
BinOp1ExpContext.prototype.constructor = BinOp1ExpContext;

ModelParser.BinOp1ExpContext = BinOp1ExpContext;

BinOp1ExpContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
BinOp1ExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterBinOp1Exp(this);
	}
};

BinOp1ExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitBinOp1Exp(this);
	}
};


function ForallExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForallExpContext.prototype = Object.create(ExpressionContext.prototype);
ForallExpContext.prototype.constructor = ForallExpContext;

ModelParser.ForallExpContext = ForallExpContext;

ForallExpContext.prototype.rngBindingList = function() {
    return this.getTypedRuleContext(RngBindingListContext,0);
};

ForallExpContext.prototype.SUCHTHAT = function() {
    return this.getToken(ModelParser.SUCHTHAT, 0);
};

ForallExpContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ForallExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterForallExp(this);
	}
};

ForallExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitForallExp(this);
	}
};


function BinOp3ExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BinOp3ExpContext.prototype = Object.create(ExpressionContext.prototype);
BinOp3ExpContext.prototype.constructor = BinOp3ExpContext;

ModelParser.BinOp3ExpContext = BinOp3ExpContext;

BinOp3ExpContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
BinOp3ExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterBinOp3Exp(this);
	}
};

BinOp3ExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitBinOp3Exp(this);
	}
};


function IdentExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IdentExpContext.prototype = Object.create(ExpressionContext.prototype);
IdentExpContext.prototype.constructor = IdentExpContext;

ModelParser.IdentExpContext = IdentExpContext;

IdentExpContext.prototype.Identifier = function() {
    return this.getToken(ModelParser.Identifier, 0);
};

IdentExpContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};
IdentExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterIdentExp(this);
	}
};

IdentExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitIdentExp(this);
	}
};


function DotExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DotExpContext.prototype = Object.create(ExpressionContext.prototype);
DotExpContext.prototype.constructor = DotExpContext;

ModelParser.DotExpContext = DotExpContext;

DotExpContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DotExpContext.prototype.Identifier = function() {
    return this.getToken(ModelParser.Identifier, 0);
};
DotExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterDotExp(this);
	}
};

DotExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitDotExp(this);
	}
};


function ForExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForExpContext.prototype = Object.create(ExpressionContext.prototype);
ForExpContext.prototype.constructor = ForExpContext;

ModelParser.ForExpContext = ForExpContext;

ForExpContext.prototype.pattern = function() {
    return this.getTypedRuleContext(PatternContext,0);
};

ForExpContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ForExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterForExp(this);
	}
};

ForExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitForExp(this);
	}
};


function AssignExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignExpContext.prototype = Object.create(ExpressionContext.prototype);
AssignExpContext.prototype.constructor = AssignExpContext;

ModelParser.AssignExpContext = AssignExpContext;

AssignExpContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
AssignExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterAssignExp(this);
	}
};

AssignExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitAssignExp(this);
	}
};


function ContinueExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ContinueExpContext.prototype = Object.create(ExpressionContext.prototype);
ContinueExpContext.prototype.constructor = ContinueExpContext;

ModelParser.ContinueExpContext = ContinueExpContext;

ContinueExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterContinueExp(this);
	}
};

ContinueExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitContinueExp(this);
	}
};


function ParenExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenExpContext.prototype = Object.create(ExpressionContext.prototype);
ParenExpContext.prototype.constructor = ParenExpContext;

ModelParser.ParenExpContext = ParenExpContext;

ParenExpContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ParenExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterParenExp(this);
	}
};

ParenExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitParenExp(this);
	}
};


function ClassExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ClassExpContext.prototype = Object.create(ExpressionContext.prototype);
ClassExpContext.prototype.constructor = ClassExpContext;

ModelParser.ClassExpContext = ClassExpContext;

ClassExpContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};
ClassExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterClassExp(this);
	}
};

ClassExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitClassExp(this);
	}
};


function TypeCastExpContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeCastExpContext.prototype = Object.create(ExpressionContext.prototype);
TypeCastExpContext.prototype.constructor = TypeCastExpContext;

ModelParser.TypeCastExpContext = TypeCastExpContext;

TypeCastExpContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

TypeCastExpContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};
TypeCastExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterTypeCastExp(this);
	}
};

TypeCastExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitTypeCastExp(this);
	}
};



ModelParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 62;
    this.enterRecursionRule(localctx, 62, ModelParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 496;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ConstructorAppExp1Context(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 378;
            this.classIdentifier();
            this.state = 379;
            this.typeArguments();
            this.state = 380;
            this.match(ModelParser.T__9);
            this.state = 382;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ModelParser.T__1 || _la===ModelParser.T__9 || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ModelParser.T__33 - 34)) | (1 << (ModelParser.T__35 - 34)) | (1 << (ModelParser.T__36 - 34)) | (1 << (ModelParser.T__37 - 34)) | (1 << (ModelParser.T__38 - 34)) | (1 << (ModelParser.T__39 - 34)) | (1 << (ModelParser.T__40 - 34)) | (1 << (ModelParser.T__41 - 34)) | (1 << (ModelParser.T__42 - 34)) | (1 << (ModelParser.T__43 - 34)) | (1 << (ModelParser.T__44 - 34)) | (1 << (ModelParser.T__45 - 34)) | (1 << (ModelParser.T__46 - 34)) | (1 << (ModelParser.T__47 - 34)) | (1 << (ModelParser.T__48 - 34)) | (1 << (ModelParser.T__49 - 34)) | (1 << (ModelParser.T__50 - 34)) | (1 << (ModelParser.T__53 - 34)) | (1 << (ModelParser.T__55 - 34)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ModelParser.T__68 - 69)) | (1 << (ModelParser.T__83 - 69)) | (1 << (ModelParser.T__85 - 69)) | (1 << (ModelParser.T__86 - 69)) | (1 << (ModelParser.T__87 - 69)) | (1 << (ModelParser.T__88 - 69)) | (1 << (ModelParser.T__89 - 69)) | (1 << (ModelParser.T__90 - 69)) | (1 << (ModelParser.T__92 - 69)) | (1 << (ModelParser.DateLiteral - 69)) | (1 << (ModelParser.DurationLiteral - 69)) | (1 << (ModelParser.IntegerLiteral - 69)) | (1 << (ModelParser.RealLiteral - 69)) | (1 << (ModelParser.BooleanLiteral - 69)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (ModelParser.NullLiteral - 101)) | (1 << (ModelParser.ThisLiteral - 101)) | (1 << (ModelParser.CharacterLiteral - 101)) | (1 << (ModelParser.StringLiteral - 101)) | (1 << (ModelParser.Identifier - 101)))) !== 0)) {
                this.state = 381;
                this.argumentList();
            }

            this.state = 384;
            this.match(ModelParser.T__10);
            break;

        case 2:
            localctx = new ParenExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 386;
            this.match(ModelParser.T__9);
            this.state = 387;
            this.expression(0);
            this.state = 388;
            this.match(ModelParser.T__10);
            break;

        case 3:
            localctx = new TupleExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 390;
            this.match(ModelParser.T__48);
            this.state = 391;
            this.match(ModelParser.T__9);
            this.state = 392;
            this.expression(0);
            this.state = 395; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 393;
                this.match(ModelParser.T__14);
                this.state = 394;
                this.expression(0);
                this.state = 397; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ModelParser.T__14);
            this.state = 399;
            this.match(ModelParser.T__10);
            break;

        case 4:
            localctx = new LiteralExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 401;
            this.literal();
            break;

        case 5:
            localctx = new IdentExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 402;
            this.match(ModelParser.Identifier);
            break;

        case 6:
            localctx = new IdentExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 403;
            this.primitiveType();
            break;

        case 7:
            localctx = new ClassExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 404;
            this.type(0);
            this.state = 405;
            this.match(ModelParser.T__4);
            this.state = 406;
            this.match(ModelParser.T__11);
            break;

        case 8:
            localctx = new ConstructorAppExp2Context(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 408;
            this.type(0);
            this.state = 409;
            this.match(ModelParser.T__9);
            this.state = 411;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ModelParser.T__1 || _la===ModelParser.T__9 || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ModelParser.T__33 - 34)) | (1 << (ModelParser.T__35 - 34)) | (1 << (ModelParser.T__36 - 34)) | (1 << (ModelParser.T__37 - 34)) | (1 << (ModelParser.T__38 - 34)) | (1 << (ModelParser.T__39 - 34)) | (1 << (ModelParser.T__40 - 34)) | (1 << (ModelParser.T__41 - 34)) | (1 << (ModelParser.T__42 - 34)) | (1 << (ModelParser.T__43 - 34)) | (1 << (ModelParser.T__44 - 34)) | (1 << (ModelParser.T__45 - 34)) | (1 << (ModelParser.T__46 - 34)) | (1 << (ModelParser.T__47 - 34)) | (1 << (ModelParser.T__48 - 34)) | (1 << (ModelParser.T__49 - 34)) | (1 << (ModelParser.T__50 - 34)) | (1 << (ModelParser.T__53 - 34)) | (1 << (ModelParser.T__55 - 34)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ModelParser.T__68 - 69)) | (1 << (ModelParser.T__83 - 69)) | (1 << (ModelParser.T__85 - 69)) | (1 << (ModelParser.T__86 - 69)) | (1 << (ModelParser.T__87 - 69)) | (1 << (ModelParser.T__88 - 69)) | (1 << (ModelParser.T__89 - 69)) | (1 << (ModelParser.T__90 - 69)) | (1 << (ModelParser.T__92 - 69)) | (1 << (ModelParser.DateLiteral - 69)) | (1 << (ModelParser.DurationLiteral - 69)) | (1 << (ModelParser.IntegerLiteral - 69)) | (1 << (ModelParser.RealLiteral - 69)) | (1 << (ModelParser.BooleanLiteral - 69)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (ModelParser.NullLiteral - 101)) | (1 << (ModelParser.ThisLiteral - 101)) | (1 << (ModelParser.CharacterLiteral - 101)) | (1 << (ModelParser.StringLiteral - 101)) | (1 << (ModelParser.Identifier - 101)))) !== 0)) {
                this.state = 410;
                this.argumentList();
            }

            this.state = 413;
            this.match(ModelParser.T__10);
            break;

        case 9:
            localctx = new NotExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 415;
            this.match(ModelParser.T__49);
            this.state = 416;
            this.expression(27);
            break;

        case 10:
            localctx = new BlockExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 417;
            this.match(ModelParser.T__1);
            this.state = 418;
            this.block();
            this.state = 419;
            this.match(ModelParser.T__2);
            this.state = 420;
            if (!( localctx.parent instanceof ModelParser.ModelContext)) {
                throw new antlr4.error.FailedPredicateException(this, "$ctx.parent instanceof ModelParser.ModelContext");
            }
            break;

        case 11:
            localctx = new IfExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 422;
            this.match(ModelParser.T__50);
            this.state = 423;
            this.expression(0);
            this.state = 424;
            this.match(ModelParser.T__51);
            this.state = 425;
            this.expression(0);
            this.state = 428;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
            if(la_===1) {
                this.state = 426;
                this.match(ModelParser.T__52);
                this.state = 427;
                this.expression(0);

            }
            break;

        case 12:
            localctx = new WhileExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 430;
            this.match(ModelParser.T__53);
            this.state = 431;
            this.expression(0);
            this.state = 432;
            this.match(ModelParser.T__54);
            this.state = 433;
            this.expression(24);
            break;

        case 13:
            localctx = new ForExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 435;
            this.match(ModelParser.T__55);
            this.state = 436;
            this.pattern(0);
            this.state = 437;
            this.match(ModelParser.T__56);
            this.state = 438;
            this.expression(0);
            this.state = 439;
            this.match(ModelParser.T__54);
            this.state = 440;
            this.expression(23);
            break;

        case 14:
            localctx = new SetEnumExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 442;
            this.collectionKind();
            this.state = 443;
            this.match(ModelParser.T__1);
            this.state = 445;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ModelParser.T__1 || _la===ModelParser.T__9 || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ModelParser.T__33 - 34)) | (1 << (ModelParser.T__35 - 34)) | (1 << (ModelParser.T__36 - 34)) | (1 << (ModelParser.T__37 - 34)) | (1 << (ModelParser.T__38 - 34)) | (1 << (ModelParser.T__39 - 34)) | (1 << (ModelParser.T__40 - 34)) | (1 << (ModelParser.T__41 - 34)) | (1 << (ModelParser.T__42 - 34)) | (1 << (ModelParser.T__43 - 34)) | (1 << (ModelParser.T__44 - 34)) | (1 << (ModelParser.T__45 - 34)) | (1 << (ModelParser.T__46 - 34)) | (1 << (ModelParser.T__47 - 34)) | (1 << (ModelParser.T__48 - 34)) | (1 << (ModelParser.T__49 - 34)) | (1 << (ModelParser.T__50 - 34)) | (1 << (ModelParser.T__53 - 34)) | (1 << (ModelParser.T__55 - 34)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ModelParser.T__68 - 69)) | (1 << (ModelParser.T__83 - 69)) | (1 << (ModelParser.T__85 - 69)) | (1 << (ModelParser.T__86 - 69)) | (1 << (ModelParser.T__87 - 69)) | (1 << (ModelParser.T__88 - 69)) | (1 << (ModelParser.T__89 - 69)) | (1 << (ModelParser.T__90 - 69)) | (1 << (ModelParser.T__92 - 69)) | (1 << (ModelParser.DateLiteral - 69)) | (1 << (ModelParser.DurationLiteral - 69)) | (1 << (ModelParser.IntegerLiteral - 69)) | (1 << (ModelParser.RealLiteral - 69)) | (1 << (ModelParser.BooleanLiteral - 69)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (ModelParser.NullLiteral - 101)) | (1 << (ModelParser.ThisLiteral - 101)) | (1 << (ModelParser.CharacterLiteral - 101)) | (1 << (ModelParser.StringLiteral - 101)) | (1 << (ModelParser.Identifier - 101)))) !== 0)) {
                this.state = 444;
                this.expressionList();
            }

            this.state = 447;
            this.match(ModelParser.T__2);
            break;

        case 15:
            localctx = new SetRngExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 449;
            this.collectionKind();
            this.state = 450;
            this.match(ModelParser.T__1);
            this.state = 451;
            this.expression(0);
            this.state = 452;
            this.match(ModelParser.T__57);
            this.state = 453;
            this.expression(0);
            this.state = 454;
            this.match(ModelParser.T__2);
            break;

        case 16:
            localctx = new SetCompExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 456;
            this.collectionKind();
            this.state = 457;
            this.match(ModelParser.T__1);
            this.state = 458;
            this.expression(0);
            this.state = 459;
            this.match(ModelParser.T__58);
            this.state = 460;
            this.rngBindingList();
            this.state = 461;
            this.match(ModelParser.SUCHTHAT);
            this.state = 462;
            this.expression(0);
            this.state = 463;
            this.match(ModelParser.T__2);
            break;

        case 17:
            localctx = new AssertExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 465;
            this.match(ModelParser.T__83);
            this.state = 466;
            this.match(ModelParser.T__9);
            this.state = 467;
            this.expression(0);
            this.state = 468;
            this.match(ModelParser.T__10);
            break;

        case 18:
            localctx = new NegExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 470;
            this.match(ModelParser.T__68);
            this.state = 471;
            this.expression(9);
            break;

        case 19:
            localctx = new PrevExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 472;
            this.qualifiedName();
            this.state = 473;
            this.match(ModelParser.T__84);
            break;

        case 20:
            localctx = new ForallExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 475;
            this.match(ModelParser.T__85);
            this.state = 476;
            this.rngBindingList();
            this.state = 477;
            this.match(ModelParser.SUCHTHAT);
            this.state = 478;
            this.expression(7);
            break;

        case 21:
            localctx = new ExistsExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 480;
            this.match(ModelParser.T__86);
            this.state = 481;
            this.rngBindingList();
            this.state = 482;
            this.match(ModelParser.SUCHTHAT);
            this.state = 483;
            this.expression(6);
            break;

        case 22:
            localctx = new LambdaExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 485;
            this.pattern(0);
            this.state = 486;
            this.match(ModelParser.T__32);
            this.state = 487;
            this.expression(5);
            break;

        case 23:
            localctx = new ContinueExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 489;
            this.match(ModelParser.T__87);
            break;

        case 24:
            localctx = new BreakExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 490;
            this.match(ModelParser.T__88);
            break;

        case 25:
            localctx = new ReturnExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 491;
            this.match(ModelParser.T__89);
            this.state = 493;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
            if(la_===1) {
                this.state = 492;
                this.expression(0);

            }
            break;

        case 26:
            localctx = new ResultExpContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 495;
            this.match(ModelParser.T__90);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 541;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,51,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 539;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new BinOp1ExpContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ModelParser.RULE_expression);
                    this.state = 498;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 499;
                    _la = this._input.LA(1);
                    if(!(_la===ModelParser.T__5 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (ModelParser.T__61 - 62)) | (1 << (ModelParser.T__62 - 62)) | (1 << (ModelParser.T__63 - 62)) | (1 << (ModelParser.T__64 - 62)) | (1 << (ModelParser.T__65 - 62)) | (1 << (ModelParser.T__66 - 62)) | (1 << (ModelParser.T__67 - 62)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 500;
                    this.expression(18);
                    break;

                case 2:
                    localctx = new BinOp2ExpContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ModelParser.RULE_expression);
                    this.state = 501;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 502;
                    _la = this._input.LA(1);
                    if(!(_la===ModelParser.T__16 || _la===ModelParser.T__68 || _la===ModelParser.T__69)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 503;
                    this.expression(17);
                    break;

                case 3:
                    localctx = new BinOp3ExpContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ModelParser.RULE_expression);
                    this.state = 504;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 505;
                    _la = this._input.LA(1);
                    if(!(_la===ModelParser.T__19 || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (ModelParser.T__70 - 71)) | (1 << (ModelParser.T__71 - 71)) | (1 << (ModelParser.T__72 - 71)) | (1 << (ModelParser.T__73 - 71)) | (1 << (ModelParser.T__74 - 71)) | (1 << (ModelParser.T__75 - 71)) | (1 << (ModelParser.T__76 - 71)) | (1 << (ModelParser.T__77 - 71)) | (1 << (ModelParser.T__78 - 71)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 506;
                    this.expression(16);
                    break;

                case 4:
                    localctx = new AndExpContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ModelParser.RULE_expression);
                    this.state = 507;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 508;
                    this.match(ModelParser.T__79);
                    this.state = 509;
                    this.expression(15);
                    break;

                case 5:
                    localctx = new OrExpContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ModelParser.RULE_expression);
                    this.state = 510;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 511;
                    this.match(ModelParser.T__80);
                    this.state = 512;
                    this.expression(14);
                    break;

                case 6:
                    localctx = new IFFExpContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ModelParser.RULE_expression);
                    this.state = 513;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 514;
                    _la = this._input.LA(1);
                    if(!(_la===ModelParser.T__81 || _la===ModelParser.T__82)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 515;
                    this.expression(13);
                    break;

                case 7:
                    localctx = new AssignExpContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ModelParser.RULE_expression);
                    this.state = 516;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 517;
                    this.match(ModelParser.T__20);
                    this.state = 518;
                    this.expression(12);
                    break;

                case 8:
                    localctx = new DotExpContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ModelParser.RULE_expression);
                    this.state = 519;
                    if (!( this.precpred(this._ctx, 32))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 32)");
                    }
                    this.state = 520;
                    this.match(ModelParser.T__4);
                    this.state = 521;
                    this.match(ModelParser.Identifier);
                    break;

                case 9:
                    localctx = new AppExpContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ModelParser.RULE_expression);
                    this.state = 522;
                    if (!( this.precpred(this._ctx, 30))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 30)");
                    }
                    this.state = 523;
                    this.match(ModelParser.T__9);
                    this.state = 525;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===ModelParser.T__1 || _la===ModelParser.T__9 || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ModelParser.T__33 - 34)) | (1 << (ModelParser.T__35 - 34)) | (1 << (ModelParser.T__36 - 34)) | (1 << (ModelParser.T__37 - 34)) | (1 << (ModelParser.T__38 - 34)) | (1 << (ModelParser.T__39 - 34)) | (1 << (ModelParser.T__40 - 34)) | (1 << (ModelParser.T__41 - 34)) | (1 << (ModelParser.T__42 - 34)) | (1 << (ModelParser.T__43 - 34)) | (1 << (ModelParser.T__44 - 34)) | (1 << (ModelParser.T__45 - 34)) | (1 << (ModelParser.T__46 - 34)) | (1 << (ModelParser.T__47 - 34)) | (1 << (ModelParser.T__48 - 34)) | (1 << (ModelParser.T__49 - 34)) | (1 << (ModelParser.T__50 - 34)) | (1 << (ModelParser.T__53 - 34)) | (1 << (ModelParser.T__55 - 34)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ModelParser.T__68 - 69)) | (1 << (ModelParser.T__83 - 69)) | (1 << (ModelParser.T__85 - 69)) | (1 << (ModelParser.T__86 - 69)) | (1 << (ModelParser.T__87 - 69)) | (1 << (ModelParser.T__88 - 69)) | (1 << (ModelParser.T__89 - 69)) | (1 << (ModelParser.T__90 - 69)) | (1 << (ModelParser.T__92 - 69)) | (1 << (ModelParser.DateLiteral - 69)) | (1 << (ModelParser.DurationLiteral - 69)) | (1 << (ModelParser.IntegerLiteral - 69)) | (1 << (ModelParser.RealLiteral - 69)) | (1 << (ModelParser.BooleanLiteral - 69)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (ModelParser.NullLiteral - 101)) | (1 << (ModelParser.ThisLiteral - 101)) | (1 << (ModelParser.CharacterLiteral - 101)) | (1 << (ModelParser.StringLiteral - 101)) | (1 << (ModelParser.Identifier - 101)))) !== 0)) {
                        this.state = 524;
                        this.argumentList();
                    }

                    this.state = 527;
                    this.match(ModelParser.T__10);
                    break;

                case 10:
                    localctx = new IndexExpContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ModelParser.RULE_expression);
                    this.state = 528;
                    if (!( this.precpred(this._ctx, 28))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 28)");
                    }
                    this.state = 529;
                    this.match(ModelParser.T__13);
                    this.state = 530;
                    this.positionalArgumentList();
                    this.state = 531;
                    this.match(ModelParser.T__15);
                    break;

                case 11:
                    localctx = new TypeCheckExpContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ModelParser.RULE_expression);
                    this.state = 533;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 534;
                    this.match(ModelParser.T__59);
                    this.state = 535;
                    this.type(0);
                    break;

                case 12:
                    localctx = new TypeCastExpContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ModelParser.RULE_expression);
                    this.state = 536;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 537;
                    this.match(ModelParser.T__60);
                    this.state = 538;
                    this.type(0);
                    break;

                } 
            }
            this.state = 543;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,51,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ArgumentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_argumentList;
    return this;
}

ArgumentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentListContext.prototype.constructor = ArgumentListContext;


 
ArgumentListContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PosArgListContext(parser, ctx) {
	ArgumentListContext.call(this, parser);
    ArgumentListContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PosArgListContext.prototype = Object.create(ArgumentListContext.prototype);
PosArgListContext.prototype.constructor = PosArgListContext;

ModelParser.PosArgListContext = PosArgListContext;

PosArgListContext.prototype.positionalArgumentList = function() {
    return this.getTypedRuleContext(PositionalArgumentListContext,0);
};
PosArgListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterPosArgList(this);
	}
};

PosArgListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitPosArgList(this);
	}
};


function NamedArgListContext(parser, ctx) {
	ArgumentListContext.call(this, parser);
    ArgumentListContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NamedArgListContext.prototype = Object.create(ArgumentListContext.prototype);
NamedArgListContext.prototype.constructor = NamedArgListContext;

ModelParser.NamedArgListContext = NamedArgListContext;

NamedArgListContext.prototype.namedArgumentList = function() {
    return this.getTypedRuleContext(NamedArgumentListContext,0);
};
NamedArgListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterNamedArgList(this);
	}
};

NamedArgListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitNamedArgList(this);
	}
};



ModelParser.ArgumentListContext = ArgumentListContext;

ModelParser.prototype.argumentList = function() {

    var localctx = new ArgumentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, ModelParser.RULE_argumentList);
    try {
        this.state = 546;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PosArgListContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 544;
            this.positionalArgumentList();
            break;

        case 2:
            localctx = new NamedArgListContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 545;
            this.namedArgumentList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PositionalArgumentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_positionalArgumentList;
    return this;
}

PositionalArgumentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PositionalArgumentListContext.prototype.constructor = PositionalArgumentListContext;

PositionalArgumentListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PositionalArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterPositionalArgumentList(this);
	}
};

PositionalArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitPositionalArgumentList(this);
	}
};




ModelParser.PositionalArgumentListContext = PositionalArgumentListContext;

ModelParser.prototype.positionalArgumentList = function() {

    var localctx = new PositionalArgumentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, ModelParser.RULE_positionalArgumentList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 548;
        this.expression(0);
        this.state = 557;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 552;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case ModelParser.T__14:
                    this.state = 549;
                    this.match(ModelParser.T__14);
                    break;
                case ModelParser.T__15:
                    this.state = 550;
                    this.match(ModelParser.T__15);
                    this.state = 551;
                    this.match(ModelParser.T__13);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 554;
                this.expression(0); 
            }
            this.state = 559;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamedArgumentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_namedArgumentList;
    return this;
}

NamedArgumentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedArgumentListContext.prototype.constructor = NamedArgumentListContext;

NamedArgumentListContext.prototype.namedArgument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedArgumentContext);
    } else {
        return this.getTypedRuleContext(NamedArgumentContext,i);
    }
};

NamedArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterNamedArgumentList(this);
	}
};

NamedArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitNamedArgumentList(this);
	}
};




ModelParser.NamedArgumentListContext = NamedArgumentListContext;

ModelParser.prototype.namedArgumentList = function() {

    var localctx = new NamedArgumentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, ModelParser.RULE_namedArgumentList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 560;
        this.namedArgument();
        this.state = 565;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ModelParser.T__14) {
            this.state = 561;
            this.match(ModelParser.T__14);
            this.state = 562;
            this.namedArgument();
            this.state = 567;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamedArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_namedArgument;
    return this;
}

NamedArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedArgumentContext.prototype.constructor = NamedArgumentContext;

NamedArgumentContext.prototype.Identifier = function() {
    return this.getToken(ModelParser.Identifier, 0);
};

NamedArgumentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

NamedArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterNamedArgument(this);
	}
};

NamedArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitNamedArgument(this);
	}
};




ModelParser.NamedArgumentContext = NamedArgumentContext;

ModelParser.prototype.namedArgument = function() {

    var localctx = new NamedArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, ModelParser.RULE_namedArgument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 568;
        this.match(ModelParser.Identifier);
        this.state = 569;
        this.match(ModelParser.T__91);
        this.state = 570;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CollectionOrTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_collectionOrType;
    return this;
}

CollectionOrTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CollectionOrTypeContext.prototype.constructor = CollectionOrTypeContext;

CollectionOrTypeContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CollectionOrTypeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

CollectionOrTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterCollectionOrType(this);
	}
};

CollectionOrTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitCollectionOrType(this);
	}
};




ModelParser.CollectionOrTypeContext = CollectionOrTypeContext;

ModelParser.prototype.collectionOrType = function() {

    var localctx = new CollectionOrTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, ModelParser.RULE_collectionOrType);
    try {
        this.state = 574;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 572;
            this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 573;
            this.type(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RngBindingListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_rngBindingList;
    return this;
}

RngBindingListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RngBindingListContext.prototype.constructor = RngBindingListContext;

RngBindingListContext.prototype.rngBinding = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RngBindingContext);
    } else {
        return this.getTypedRuleContext(RngBindingContext,i);
    }
};

RngBindingListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterRngBindingList(this);
	}
};

RngBindingListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitRngBindingList(this);
	}
};




ModelParser.RngBindingListContext = RngBindingListContext;

ModelParser.prototype.rngBindingList = function() {

    var localctx = new RngBindingListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, ModelParser.RULE_rngBindingList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 576;
        this.rngBinding();
        this.state = 581;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ModelParser.T__14) {
            this.state = 577;
            this.match(ModelParser.T__14);
            this.state = 578;
            this.rngBinding();
            this.state = 583;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RngBindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_rngBinding;
    return this;
}

RngBindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RngBindingContext.prototype.constructor = RngBindingContext;

RngBindingContext.prototype.patternList = function() {
    return this.getTypedRuleContext(PatternListContext,0);
};

RngBindingContext.prototype.collectionOrType = function() {
    return this.getTypedRuleContext(CollectionOrTypeContext,0);
};

RngBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterRngBinding(this);
	}
};

RngBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitRngBinding(this);
	}
};




ModelParser.RngBindingContext = RngBindingContext;

ModelParser.prototype.rngBinding = function() {

    var localctx = new RngBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, ModelParser.RULE_rngBinding);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 584;
        this.patternList();
        this.state = 585;
        this.match(ModelParser.T__7);
        this.state = 586;
        this.collectionOrType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PatternListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_patternList;
    return this;
}

PatternListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PatternListContext.prototype.constructor = PatternListContext;

PatternListContext.prototype.pattern = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PatternContext);
    } else {
        return this.getTypedRuleContext(PatternContext,i);
    }
};

PatternListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterPatternList(this);
	}
};

PatternListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitPatternList(this);
	}
};




ModelParser.PatternListContext = PatternListContext;

ModelParser.prototype.patternList = function() {

    var localctx = new PatternListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, ModelParser.RULE_patternList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 588;
        this.pattern(0);
        this.state = 593;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ModelParser.T__14) {
            this.state = 589;
            this.match(ModelParser.T__14);
            this.state = 590;
            this.pattern(0);
            this.state = 595;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_pattern;
    return this;
}

PatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PatternContext.prototype.constructor = PatternContext;


 
PatternContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function LiteralPatternContext(parser, ctx) {
	PatternContext.call(this, parser);
    PatternContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralPatternContext.prototype = Object.create(PatternContext.prototype);
LiteralPatternContext.prototype.constructor = LiteralPatternContext;

ModelParser.LiteralPatternContext = LiteralPatternContext;

LiteralPatternContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};
LiteralPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterLiteralPattern(this);
	}
};

LiteralPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitLiteralPattern(this);
	}
};


function DontCarePatternContext(parser, ctx) {
	PatternContext.call(this, parser);
    PatternContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DontCarePatternContext.prototype = Object.create(PatternContext.prototype);
DontCarePatternContext.prototype.constructor = DontCarePatternContext;

ModelParser.DontCarePatternContext = DontCarePatternContext;

DontCarePatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterDontCarePattern(this);
	}
};

DontCarePatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitDontCarePattern(this);
	}
};


function IdentPatternContext(parser, ctx) {
	PatternContext.call(this, parser);
    PatternContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IdentPatternContext.prototype = Object.create(PatternContext.prototype);
IdentPatternContext.prototype.constructor = IdentPatternContext;

ModelParser.IdentPatternContext = IdentPatternContext;

IdentPatternContext.prototype.Identifier = function() {
    return this.getToken(ModelParser.Identifier, 0);
};
IdentPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterIdentPattern(this);
	}
};

IdentPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitIdentPattern(this);
	}
};


function CartesianPatternContext(parser, ctx) {
	PatternContext.call(this, parser);
    PatternContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CartesianPatternContext.prototype = Object.create(PatternContext.prototype);
CartesianPatternContext.prototype.constructor = CartesianPatternContext;

ModelParser.CartesianPatternContext = CartesianPatternContext;

CartesianPatternContext.prototype.pattern = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PatternContext);
    } else {
        return this.getTypedRuleContext(PatternContext,i);
    }
};
CartesianPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterCartesianPattern(this);
	}
};

CartesianPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitCartesianPattern(this);
	}
};


function TypedPatternContext(parser, ctx) {
	PatternContext.call(this, parser);
    PatternContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypedPatternContext.prototype = Object.create(PatternContext.prototype);
TypedPatternContext.prototype.constructor = TypedPatternContext;

ModelParser.TypedPatternContext = TypedPatternContext;

TypedPatternContext.prototype.pattern = function() {
    return this.getTypedRuleContext(PatternContext,0);
};

TypedPatternContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};
TypedPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterTypedPattern(this);
	}
};

TypedPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitTypedPattern(this);
	}
};



ModelParser.prototype.pattern = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PatternContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 80;
    this.enterRecursionRule(localctx, 80, ModelParser.RULE_pattern, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 610;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ModelParser.DateLiteral:
        case ModelParser.DurationLiteral:
        case ModelParser.IntegerLiteral:
        case ModelParser.RealLiteral:
        case ModelParser.BooleanLiteral:
        case ModelParser.NullLiteral:
        case ModelParser.ThisLiteral:
        case ModelParser.CharacterLiteral:
        case ModelParser.StringLiteral:
            localctx = new LiteralPatternContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 597;
            this.literal();
            break;
        case ModelParser.T__92:
            localctx = new DontCarePatternContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 598;
            this.match(ModelParser.T__92);
            break;
        case ModelParser.Identifier:
            localctx = new IdentPatternContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 599;
            this.match(ModelParser.Identifier);
            break;
        case ModelParser.T__9:
            localctx = new CartesianPatternContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 600;
            this.match(ModelParser.T__9);
            this.state = 601;
            this.pattern(0);
            this.state = 604; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 602;
                this.match(ModelParser.T__14);
                this.state = 603;
                this.pattern(0);
                this.state = 606; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ModelParser.T__14);
            this.state = 608;
            this.match(ModelParser.T__10);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 617;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TypedPatternContext(this, new PatternContext(this, _parentctx, _parentState));
                this.pushNewRecursionContext(localctx, _startState, ModelParser.RULE_pattern);
                this.state = 612;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 613;
                this.match(ModelParser.T__7);
                this.state = 614;
                this.type(0); 
            }
            this.state = 619;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function IdentifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_identifierList;
    return this;
}

IdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierListContext.prototype.constructor = IdentifierListContext;

IdentifierListContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ModelParser.Identifier);
    } else {
        return this.getToken(ModelParser.Identifier, i);
    }
};


IdentifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterIdentifierList(this);
	}
};

IdentifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitIdentifierList(this);
	}
};




ModelParser.IdentifierListContext = IdentifierListContext;

ModelParser.prototype.identifierList = function() {

    var localctx = new IdentifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, ModelParser.RULE_identifierList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 620;
        this.match(ModelParser.Identifier);
        this.state = 625;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ModelParser.T__14) {
            this.state = 621;
            this.match(ModelParser.T__14);
            this.state = 622;
            this.match(ModelParser.Identifier);
            this.state = 627;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitExpressionList(this);
	}
};




ModelParser.ExpressionListContext = ExpressionListContext;

ModelParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, ModelParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 628;
        this.expression(0);
        this.state = 633;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ModelParser.T__14) {
            this.state = 629;
            this.match(ModelParser.T__14);
            this.state = 630;
            this.expression(0);
            this.state = 635;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_qualifiedName;
    return this;
}

QualifiedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameContext.prototype.constructor = QualifiedNameContext;

QualifiedNameContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ModelParser.Identifier);
    } else {
        return this.getToken(ModelParser.Identifier, i);
    }
};


QualifiedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterQualifiedName(this);
	}
};

QualifiedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitQualifiedName(this);
	}
};




ModelParser.QualifiedNameContext = QualifiedNameContext;

ModelParser.prototype.qualifiedName = function() {

    var localctx = new QualifiedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, ModelParser.RULE_qualifiedName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 636;
        this.match(ModelParser.Identifier);
        this.state = 641;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,64,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 637;
                this.match(ModelParser.T__4);
                this.state = 638;
                this.match(ModelParser.Identifier); 
            }
            this.state = 643;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,64,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ModelParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.DateLiteral = function() {
    return this.getToken(ModelParser.DateLiteral, 0);
};

LiteralContext.prototype.DurationLiteral = function() {
    return this.getToken(ModelParser.DurationLiteral, 0);
};

LiteralContext.prototype.IntegerLiteral = function() {
    return this.getToken(ModelParser.IntegerLiteral, 0);
};

LiteralContext.prototype.RealLiteral = function() {
    return this.getToken(ModelParser.RealLiteral, 0);
};

LiteralContext.prototype.CharacterLiteral = function() {
    return this.getToken(ModelParser.CharacterLiteral, 0);
};

LiteralContext.prototype.StringLiteral = function() {
    return this.getToken(ModelParser.StringLiteral, 0);
};

LiteralContext.prototype.BooleanLiteral = function() {
    return this.getToken(ModelParser.BooleanLiteral, 0);
};

LiteralContext.prototype.NullLiteral = function() {
    return this.getToken(ModelParser.NullLiteral, 0);
};

LiteralContext.prototype.ThisLiteral = function() {
    return this.getToken(ModelParser.ThisLiteral, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ModelListener ) {
        listener.exitLiteral(this);
	}
};




ModelParser.LiteralContext = LiteralContext;

ModelParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, ModelParser.RULE_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 644;
        _la = this._input.LA(1);
        if(!(((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ModelParser.DateLiteral - 96)) | (1 << (ModelParser.DurationLiteral - 96)) | (1 << (ModelParser.IntegerLiteral - 96)) | (1 << (ModelParser.RealLiteral - 96)) | (1 << (ModelParser.BooleanLiteral - 96)) | (1 << (ModelParser.NullLiteral - 96)) | (1 << (ModelParser.ThisLiteral - 96)) | (1 << (ModelParser.CharacterLiteral - 96)) | (1 << (ModelParser.StringLiteral - 96)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


ModelParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 26:
			return this.type_sempred(localctx, predIndex);
	case 31:
			return this.expression_sempred(localctx, predIndex);
	case 40:
			return this.pattern_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

ModelParser.prototype.type_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 3);
		case 1:
			return this.precpred(this._ctx, 4);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ModelParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return localctx.parent instanceof ModelParser.ModelContext;
		case 3:
			return this.precpred(this._ctx, 17);
		case 4:
			return this.precpred(this._ctx, 16);
		case 5:
			return this.precpred(this._ctx, 15);
		case 6:
			return this.precpred(this._ctx, 14);
		case 7:
			return this.precpred(this._ctx, 13);
		case 8:
			return this.precpred(this._ctx, 12);
		case 9:
			return this.precpred(this._ctx, 11);
		case 10:
			return this.precpred(this._ctx, 32);
		case 11:
			return this.precpred(this._ctx, 30);
		case 12:
			return this.precpred(this._ctx, 28);
		case 13:
			return this.precpred(this._ctx, 19);
		case 14:
			return this.precpred(this._ctx, 18);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ModelParser.prototype.pattern_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 15:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.ModelParser = ModelParser;
